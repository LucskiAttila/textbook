<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, !</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>FUTURE tevékenység editor</title>
        <para>
             Javítsunk valamit a ActivityEditor.java JavaFX programon! https://github.com/nbatfai/future/tree/master/cs/F6 Itt láthatjuk működésben az alapot: https://www.twitch.tv/videos/222879467
        </para>
        <para>
             A Future projekt a városok jövőbeli kutatására irányult a város lakóira alapozva, hogy azok innovatív és környezettudatos technológiai megoldásokat használjanak mindennapi feladatai megoldásában és hosszú távú céljai elérésében. Az F6-os projekt arra készült hogy a hallgatók a napi tevékeknységeiket feljegyezzék ugye környezettudatosan. 
             Az F6 projekt java programozési nyelven írt programja az ActivityEditor.java így ezt kellessz fordítanunk és futtatnunk, de ehhez szükségesek a többi fájlok is a projektből, illetve társítani kell a JavaFX-es könyvtárakat is. Mivel ebből elég sokat fog használni a programunk így egy szkriptet készítettem hozzá run néven melynek segítségével fordítom és futtatom is a programot:
        </para>
        <programlisting><![CDATA[
             #!/usr/bin/env bash
             export PATH_TO_FX="/usr/share/openjfx/lib"
             java_modules="javafx.controls,javafx.graphics,javafx.media,javafx.swing,javafx.web"
             rm -f *.class
             /usr/lib/jvm/java-11-openjdk-amd64/bin/javac\
                 --module-path $PATH_TO_FX\
                 --add-modules=$java_modules ActivityEditor.java
             /usr/lib/jvm/java-11-openjdk-amd64/bin/java\
                 --module-path $PATH_TO_FX\
                 --add-modules=$java_modules ActivityEditor
             rm -f *.class
        ]]></programlisting>
        <para>
             Az F6 projektet pedig az alábbi módon tölthetjük le, és indíthatjuk el miután megírtuk a run szkriptet:
        </para> 
        <programlisting><![CDATA[
             git clone https://github.com/nbatfai/future.git
             cd future/cs/F6
             gedit run
             ./run
        ]]></programlisting>
        <para>     
             A feladat az volt hogy javítsunk valamit a kódon, így kibővítettem egy törlés funkcióval amivel törölhetjük a mappáit vagy fájlait a megjelenített könyvtárszerkezetnek a gyökér mappa kivételével, mivel azt az ActivityEditor programunkban hozzuk létre a fa gyökereként nem fájlból olvassuk be. Ahogy az Én magam elemet is létrehozzuk faelemként nem beolvasással hozzuk létre, így ez a két elem fog látszani ha elindeítjuk a programot a City, gaming.props, initF6actFS.sh, me.props, programming.props fájlok használata nélkül. A program könyvtárszerkezete működik a  gaming.props, initF6actFS.sh, me.props, programming.props fájlok használata nélkül is. 
        </para>
        <programlisting language="Java"><![CDATA[
             javafx.scene.control.MenuItem deleteMenuItem = new javafx.scene.control.MenuItem("Törlés");
             addMenu.getItems().add(deleteMenuItem);
	     deleteMenuItem.setOnAction((javafx.event.ActionEvent evt) -> {
             javafx.scene.control.TreeItem item = getTreeItem();
             if (item.getParent() == null ){
             System.out.print("Cannot remove the root node.\n");}
             else{
             java.io.File file = getTreeItem().getValue();
             item.getParent().getChildren().remove(item);
	     deleteDirectory(file);}});}
             public boolean deleteDirectory(java.io.File directory) {
             if(directory.exists()){
             java.io.File[] files = directory.listFiles();
             if(null!=files){
             for(int i=0; i<files.length; i++) {
             if(files[i].isDirectory()) {
             deleteDirectory(files[i]);}
             else {
             files[i].delete();}}}}
             return(directory.delete());} 
        ]]></programlisting>
	<para>
	     Létrehoztunk Törlés menüpontot deleteMenuitem néven majd hozzáadtuk a Menu objektumhoz, majd beállítottunk hozzá egy akciót, mely egy megfelelő esemény bekövetkezésekor hívódik meg. A getTreeitem függvénnyel lekérjük a kijelölt mappát, majd ellenőrizzük almappa e, ha nem akkor hibaüzenetet írunk hogy gyökékönyvtárat nem lehet törölni, ha almappa akkor a remove függvénnyel töröljük az adatszerkezetből, majd töröljük a gépről is, ehhez viszont fájlként kell kezelnünk, majd meghívjuk rá az általunk készített deleteDirectory függvényt. Ez azért szüskséges mivel törölni szeretnénk a kijelölt mappánkat almappáival fájlaival együtt, azaz tartalmával együtt és a delete csak üres mappákkra vagy fájlokra hívható meg. A deleteDirectory függvény úgy működik hogy először ellenőrizzük a paraméterül kapott fájlról hogy létezik e, ha nem akkor a return részhez ugrunk ami meghívja a delete függvényt a nem létező fájlra és hibaüzenetet kapunk a delete függvénytől. Ha viszont létezik a fájl akkor az alfájlait belértve az almappákat is belerakjuk egy tömbbe, majd meghívjuk egyessével a tömb elemeit és ha mappa akkor meghívjuk rá rekurzívan a függvényünket egyébként töröljük a fájlt, majd a mappákat a rekurzív függvényhívások kiértékelődésekor törlil a függvények.                              	
	</para> 
             mediaobject>
             <imageobject>
                 <imagedata fileref="future.png"></imagedata>
             </imageobject>
         </mediaobject>
    </section>	 

    <section>
        <title>OOCWC Boost ASIO hálózatkezelése</title>
        <para>
             Mutassunk rá a scanf szerepére és használatára! https://github.com/nbatfai/robocaremulator/blob/master/justine/rcemu/src/carlexer.ll
        </para>
        <para>
	     A sscanf függvény annyiban tér el a scanf változatától hogy ez az általunk meghatározott forrásból olvassa ki a szöveget, a scanf pedig a szabványos bemenetről. Mindkét függvény visszatérési értéke egy egész szám a parméterül adott referenciáknak a száma amikebe a szövegből beolvastunk értékeket, hiba esetén EOF karakterrel tér vissza, ami olyan karakter ami a char értékkészletén kívül esik. Mindkét függvény használatához az #include <stdio.h> header használata szükséges, illetve az std:: névtér. A sscanf függvény első paramétere az hogy honnan próbálja meg ráilleszteni a második paraméterként megadott mintára a szöveget. A formátumot " " jelek között kell megadni, ahol akármilyen karaktereket megadhatunk akár whitespace-eket például szökózt is, illetve használhatunk karaktertípusokat is ekkor meg kell adni ugye a hozzátartozó változó referenciákat ahova mentse a beolvasott típus értékét illeszkedés esetén, ezeket a függvény további paramétereként adjuk meg. A karaktertípusoknak speciális jelölésük van például a char-nak c, string-nek s, decimal int d, f float point, ahol ugye a char az egy karaktert, a string szöveget, decimal int decimális azaz tízesszámrendszerbeli egész számot, a float point egy tizedes vesszőt tartalmazó nem valós számot. Sztring esetén egy white spac-ig olvas be karaktereket, ehhez char*, a char-hoz is, a float point-hoz float*, az int-hez int* referencia szükséges hogy tároljuk.   
	</para>
        <programlisting language="Java"><![CDATA[
	while ( std::sscanf ( data+nn, "<OK %d %u %u %u>%n", &idd, &f, &t, &s, &n ) == 4 ){
	nn += n;
	gangsters.push_back ( Gangster {idd, f, t, s} );}	
        ]]></programlisting>
        <para>
	     Ebben a példában a sccanf függvényt arra használjuk hogy a data sztring <OK %d %u %u %u> alakú szövegrészeiből Gangster objektumokat hozzunk létre melyeket a gangsters vektorba tárolva különítünk el egymástól, mivel a vektor elemeit lekérdezhetjük majd. Ehhez ugye override-oltuk azaz túlterheltük a scanf függvényt, az nn változót valószínüleg 0 kezdőértékkel definiáltuk egész típussal, melynek értékét az n egész változó értékével növeljük minden beolvasott Gangster objektum után. Az n változó értékét minden beolvasás után a beolvasott sztring karakterjeinek számára módosítja a függvény, beleszámolja a nem illeszkedüket is, ezt a %n speciális karakter adja meg. Fontos hogy ez nem ugyanaz mint a függvény visszatérési értéke mert az fix szám és azoknak a paraméterül adott referenciáknak a száma amikbe beolvasunk a bemenetből. A visszatérési értéke jelen esetben 4, ha jól működik a függvényünk, azaz betud olvasni egy Gangster objektum létrehozásához elegendő változókat, azaz a konstruktorának változóit. A while ciklus addig fogja újból meghívni a scanf függvényt ameddig tud beolvasni újabb gangsters vektor elemet azaz Gangster objektumot. Ahhoz hogy ne olvassuk be kétszer ugyanazt a Gangster objektumot ahhoz növeljük a beolvasási pointer értékét a már beolvasott sztringek hosszával. A %u az unsigned decimal int-eket jelenti azaz aláírás nélküli decimélis egész számokat. Ennek a decimális szava a számjegyeire utal ami tizes számrendszerbeli az 0,1,2,3,4,5,6,7,8,9 számjegyekből épül fel. Az aláírás nélküli rész pedig arra hogy nem tartalmaz negatív egészeket, ehelyett dupla akkora pozitív egészeket tartalmaz 0-val kezdődően mint a sima int típus.           
	</para>
    </section>
		
    <section>
        <title>SamuCam</title>
        <para>
	     Mutassunk rá a webcam (pl. Androidos mobilod) kezelésére ebben a projektben: https://github.com/nbatfai/SamuCam
	</para>
        <para>            
             A SamuCam projekt segítségével a számítógépünk kamerája felismeri az arcunkat, ehhez azonban szükségünk van egy kamerára, ha viszont nincs akkor az Androidos telefonunkra telepítenünk kell az IP WEBCAM applikációt, melyben a Start server opcióval elindíthatjuk a vidó streamet a telefon kameráján keresztül, ez megad nekünk egy ip címet amit a programunk futtatásakor az --ip ipcím kapcsolóval kell csatolni. Ahhoz hogy a gépen tudjuk futtatni az alábbiakat kell tennünk:
	     <programlisting><![CDATA[
		sudo apt-get install libopencv-dev qt5-default
		git clone https://github.com/nbatfai/SamuCam.git
		cd SamuCam/
		wget https://github.com/Itseez/opencv/raw/master/data/lbpcascades/lbpcascade_frontalface.xml
		qmake SamuLife.pro
 		make
 		./SamuCam
	     ]]></programlisting>
	     A libopencv-dev csomag az OpenCV osztályok használatához szüskéges mivel ezekkel dolgozzuk fel a kamera által streamelt adatokat, illetve ezzel végezzük el az arcfelismerést. A QT keretrendszert is telepítjük mivel használunk a programban például a QT slot-sigal mehacnizmusát, illetve ezzel fogjuk fordítani a projektet a hozzátartozó qmake paranccsal. A git clone paranccsal pedig letöltjük magát a SamuCam projektet és a wget parancsal pedig letöltünk egy xml fájlt ami az arcfelismerő működéséhez szükséges adatokat tartalmazza.
	     <programlisting language="C++"><![CDATA[
		SamuCam::SamuCam ( std::string videoStream, int width = 176, int height = 144 )
		  : videoStream ( videoStream ), width ( width ), height ( height ){
		  openVideoStream();}
		SamuCam::~SamuCam (){}
		void SamuCam::openVideoStream(){
  		videoCapture.open ( 0 );
  		videoCapture.set ( CV_CAP_PROP_FRAME_WIDTH, width );
  		videoCapture.set ( CV_CAP_PROP_FRAME_HEIGHT, height );
  		videoCapture.set ( CV_CAP_PROP_FPS, 10 );}
	     ]]></programlisting>
	     A feladat alapján a webcam működéséről kell írnunk ezt pedig a SamuCam.cpp fájl tartalmazza. A program elején definiáltuk a SamuCam konstruktorát, melynek elsőparamétere az általunk megadott ip cím lesz de ezt ugye a main függvénybe definiáltuk ahol kezeljük a parancssori argumentumokat egy SamuCam konstruktor meghívással. Ezt az értéket mentjük egy videoStream sztring típusú változóba, a második és harmadik paraméter értékét megadtuk. Ezen értékekekkel inicializáljuk az aktuális objektumunk változóit, majd meghívjuk az openVideoStream függvényt. Ennek a függvénynek nincs visszatérési értéke sem paramétere, de ősosztálya a SamuCam osztálynak így örökli az aktuális objektum változóinak értékét, a videoCapture.open függvénnyel nyitjuk meg a videósztreamet, majd beáll1tjuk a set függvénnyel a stream képernyő méretét, illetve a maximum fps értékét. Ezek a beáll1tások azért szükségesek mert a programunk eléggé erőforrásigényes és ezzel próbáljuk meg elérni hogy lefusson lefagyás nélkül. Az open függvény paramétere lehetne 0 is ekkor a laptopunk webkameráját használná a program, illetve ip cím helyett megadhatnánk már létező videót is. A run függvényben hajtjuk végre az arcfelismerést, ez örökli az aktuális SamuCam objektum tulajdonságait, mivel felhasználjuk a videoCapture objektumát, illetve a SamuCam örökli a QThread osztályt mivel a run függvényt az tartalmazza. A run függvény indítja el a szálak működését, de jelen esetben overridoltuk, mivel példányosítottunk benne egy CascadeClassifier objektumot, mivel ez az osztály felelős azért hogy felismerjünk egy objektumot a videósztreamből. Ehhez az oszályhoz tartoznak a load és detectMultiScale függvények. A load függvény segítségével töltjük be a detektáláshoz szükséges xml fájlokat, jelen esetben az arcfelismeréshez szükséges fájlt, a betöltést hibakezeltük egy if feltétellel. A detectMultiScale függvény végzi az objektumok detektálását, melynek első paramétere egy Mat objektum referenciája, ezen fogja végezni a detektálást, a második paraméter <Rect> típusú vektor referenciája, ebbe fogja tárolni a detektált objektumokat, a harmadik paraméterben a skálafaktor, ami azt adja meg milyen mértékben csökkenjen a képméret skálázásonként, a harmadik paraméter azt adja meg minimum hány szomszádos téglalapnak kell lennie az adott téglalapnak, minSize a minimális objektum méret, maxSize a maimális objektum méret. Tehát mivel a felismerő függvény bemenetje egy Mat típusú objektum így létrehozunk egyet, és beleolvassuk a videósztreamet a read függvény segítségével. A read függvényt egy while ciklusba rakjuk hgoy addig olvasson amíg van bemenet, ezt pedig egy másik while ciklusba hogy addig olvasson amíg meg van nyitva a videósztream. A beolvasás után ellenőrizzük hogy üres e beolvasott Mat objektum, ha nem akkor a resize függvénnyel visszaméretezzük a már beolvasott képet az eredeti méretre, majd a cvtColor függvénnyel módosítjuk a beolvasott kép színét fekete-fehérre, ez is arc felismeréshez szükséges, mivel fekete-fehér képre van az xml forrásfájl. A fejete-fehér kép egy új Mat objektumba kerül, ezt az equalizeHist függvénnyel javítunk a képminőségen. Majd létrehozunk egy <rectangle> elemekből álló vektort amibe mentjük a detektált objektumokat a detectMultiScale függvény. Ha sikeres volt az arcfelismerés tehát a vektorunk elemszáma nagyobb 0 akkor készítünk egy másik Mat objektumot a vektorunk 0-ik elemének másolatával, amit a clone függvénnyel másolunk le, illetve ezzel allokálunk neki memóriát is, hogy a többi objektum ne módosuljon. Ebből az új objektumból létrehozunk egy új képet. Majd létrehozunk két pontot a Point objektumok létrehozásával, melyre illesztünk egy téglalpot a rectangle függvénnyel a Scalar függvényt felhasználva halványkék színnel a Mat objektumra ahova beolvastuk a videósztreamet részletet. Majd meghívjuk az emit függvénnyel a slot-signal mehanizmust, majd létrehozunk egy újabb képet az objektumból ahova beolvastuk a videósztream részletet és ismét meghívunk egy emit signal-slot mehacnizmust. A sleep függvényekkel késleltetjük a szálat a paraméterül adott miliszekundomokig, ezt valószínüleg a hatékonyabb működés érdekében használjuk. A signal-slot mehacnizmus lehet felelős azért hogy kommunikáljon másik objektummal hogy jelenítse meg a képeket. Az if feltétellel azt ellenőrizzük hogy megvan e még nyitva a videósztream, ha nincs újra megnyitjuk.                               
	</para>    
             mediaobject>
             <imageobject>
                 <imagedata fileref="samucam.png"></imagedata>
             </imageobject>
         </mediaobject>
    </section>	 

    <section>
        <title>BrainB</title>
        <para>
	     Mutassuk be a Qt slot-signal mechanizmust ebben a projektben: https://gi thub.com/nbatfai/esporttalent-search
	</para>
        <para>            
             A BrainB projekt a játékbeli karakterelvesztést szimulálja, mivel a Samu Entropy négyzet közepén lévő fekete ponton kell tartani az egeret, ha ez sikerül akkor elkezd mozogni és megsokszorozódni a négyzetek száma. Ha viszon elvesztjük Samu Entropy-t azaz nem tudjuk a fekete pontján tartani a kurzort akkor csökkeni fog a négyzetek száma és lassul a mozgása is. A teszt 10 percig tart, erről kapunk információt az ablak felső sorában, az eredméyeinket a README.md fájl tartalmazza. Ez lost/found részekből áll a karakter elvesztése és megtalálásáról, én kb. két perc után kiléptem, így meghívódott a Close Event melyben definiáltuk hogy hívja meg a save függvényt ami menti az teszt adatait és leállítja a programot beépített signal-slot mechanizmus segítségével Test néven bővítve az eeltelt milliszekundumok számával. A projekt működéséhez szüskégesek az alábbi lépések végrehajtása a parancssorban:
	     <programlisting><![CDATA[
		sudo apt-get install libopencv-dev qt5-default
		git clone https://github.com/nbatfai/esport-talent-search.git
		cd esport-talent-search
		qmake BrainB.pro
 		make
 		./BrainB
	     ]]></programlisting>		
             A program használatához szükségesek az opencv és qt kiegészítőket telepíteni, a QT fájlokból a qmake paranccsal létrehozzuk a MakeFile-t amiből a make paranccsal létrehozzuk a futtatható állományokat. A QT keretkrendszer segítségével tudjuk használni a signal-slot mechanizmust ami az objektumok közötti kommunikációt valósítja meg. A signal-ok függvények visszatérési értél és definícó nélkül, azonban rendelkeznek deklarációval és paraméterekkel. Illetve a signálokat nem a hagyományos módon lehet meghívni, hanem az emit kulcsszó seg1tségével. A signal függvények meghívódása esetén automatikusan meghívódinak a hozzákapcsolt slot-ok.  A slot-okat már meghívhatjuk a hagyományos módon, lehet definíciójuk, paraméterük, de visszatérési értékük nem. A signal és slot-ok összekapcsolását a connect függvény véggzi, ehhez azonban az szükséges hogy a signalok paramétere megeggyezzen a slot-ével vagy a slot-nak ne legyen paramétere mivel a szignal átadhatja neki. A connect függvényeket kéféleképpen használhatjuk megadhatjuk a SIGNAL() SLOT() kifejezéseket, de el is hagyhatjuk belőle ekkor azonban &osztálynév:: -tal kell helyettesíteni őket. Mivel az utóbbi eset a frissebb verzió így célszerű úgy használni a connect függvényeket. A connect függvény első paramétere az objektum ami a szignált küldi, a második paraméter a szignál amit meghívhatunk majd, a harmadik paraméter a slot objektuma, a negyedik paraméter a slot amit meghív a signal. A QT osztályok mindegyike tartalmaz beépített szignál-okat és slot-okat, ezeket akár felül is definiálhatjuk. Ha viszont saját osztályokat használunk akkor leszármazottja kell hogy legyen a QObject osztálynak és tartalmaznia kell a Q_OBJECT makrót. Ez a QT osztályokra nem érvényes mivel azok leszármazottjai a QObject osztálynak. Fontos megjegyezni hogyha túl sok szignál-slot kifejezéseket tartalmaz a programunk akkor jóval lassabban fog működni mint azok nélkül. 
	     <programlisting language="c++"><![CDATA[
	       connect ( brainBThread, SIGNAL ( heroesChanged ( QImage, int, int ) ),
    	       this, SLOT ( updateHeroes ( QImage, int, int ) ) );

	       connect ( brainBThread, SIGNAL ( endAndStats ( int ) ),
    	       this, SLOT ( endAndStats ( int ) ) );
	     ]]></programlisting>		
             Az első esetben brainBThread objektum heroesChanged szignál-ja Samu Entropy objektumunk pozíciójának aktuális koordinátáit illetve az abalkunknak az aktuális képét adjuk tovább az aktuális objektum updateHeroes függvényének ami ugye a BrainBWin objktum része. Az updateHeroes függvény a kapott értékekből kiszámítja a MouseEvent értékeinek segítségével azaz az egérpozíciókból hogy elvesztettük e a karakterünket azaz Samu Entropy-t vagy nem, illetve ha 12-nél többször bekövetkezik egymás után egy eset akkor meghívunk rá egy függvényt. Ez esetenként eltérő, karakterelvesztéskor törlünk egy New Entropy-t azaz a többi karakter közül egyet, illetve csökkentünk a mozgási sebesség értékén, de ezek itt még nem valósulnak meg a képernyőn. A másik esetben kilépünk a progrmaból ha 300-nál több New Samu objektumunk van, illetve mindkét esetben végzünk statisztikai mentéseket is. Majd pixmap-pá alakítjuk az ugye paramétertőlkapott képünket és meghívjuk az update() függvényt mellyel Paint Event-et hívunk meg és frissítjük az ablakot.
	     A második esetben az emit függvény a run függvényben van azaz az endAndStats függvény ott hívódik meg. A run függvény egy while ciklussal kezdődik  ami addig fut amíg le nem tellik a 10 perc, ezt minden ciklus után ellenőrzi, ha letellik akkor meghívódik az endAndStat szignál ami kiírja a szabványos kimenetre hogy köszönjük a program használatát és hogy hova mentette a tesztünk eredményét, ezt a mentést el is végzi és leállítja a program működését a save függvénnyel és a Close Event-et meghívó close függvénnyel. A run függvény ciklusában meghívjuk a devel függvényt, mely a move függvény és egy kondíciós feltétel segítségével a vektor objektumainak kisebbik elemét elosztja tízzel, ezzel módosíthatjuk a téglalpok elhelyezkedését. Majd még meghívódik a draw függvény amely a kirajzolást végzi, elkészíti az ablak alakzatait, majd meghívja az emit függvénnyel az előbbi herosChanged szignált.
	</para>
             mediaobject>
             <imageobject>
                 <imagedata fileref="brainb.png"></imagedata>
             </imageobject>
         </mediaobject>
    </section>	 

    <section>
        <title>GPS Tracker</title>
        <para>
	     Alternatívaként készíthetsz egy GoogleMaps alapú Androidos „GPS trackert”, 2007 óta csinálok ilyen példát: https://youtu.be/QStgBZ6JfAU az aktuális a Bátfai Haxor Stream keretében: https://bhaxor.blog.hu/-2018/09/19/nandigps_ismerkedes_a_gps-el
	</para> 
        <para>
	     Mivel Andoid alapú programot fogunk használni így ennek létrehozásához szükségünk van egy androidos programozó felületre, erre biztosít lehetőséget az Anroid Studio, melyben Google Maps projektet hozhatunk létre java programozási nyelven, ehhez az alábbi linkről kell letöltenünk az Android Studio alkalmazást: https://developer.android.com/studio/?gclid=Cj0KCQiAtrnuBRDXARIsABiN-7AOcYGiI4BAzjPgInOkVafrF-lJ7njwOuvMZK-hvrLQhOPgHiYpQtoaApe6EALw_wcB ,majd a parancssorban az alábbi műveletet kell végrehajtanunk:
	     <programlisting><![CDATA[
		cd ~Letöltések
		
 		make
 		./BrainB
	     ]]></programlisting>		

		
		
