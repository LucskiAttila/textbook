<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Calvin!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    
    <section>
        <title>MNIST</title>
        <para>
            Az alap feladat megoldása, +saját kézzel rajzolt képet is ismerjen fel, https://progpater.blog.hu/2016/11/13/hello_samu_a_tenso rflow bol Háttérként ezt vetítsük le: https://prezi.com/0u8ncvvoabcr/no programming programming/        
        </para>
        <para>
            A programunk megírásához TensorFlow kiegészítőket használtuk fel, mivel ez egy olyan könyvtárszerkezet melynek használatával gépi tanulást valósíthatunk meg például ugye neurális hálók használatakor. A feadatban is egy ilyen neurális hálózatot hoztunk létre a MNIST adatbázsit felhasználva, ezzel tanítottuk be a hálózatot hogy felismerje a számokat, mivel a MNIST képekből áll melyek kézzel rajzolt számokat ábrázolnak és hozzájuk tartozik egy címke ami azt tartalmazza hogy melyik számot kéne felismerni a képről a programnak. A forráskódunk elején láthatjuk hogy importáláshoz használt könyvtárak a matplotlib és a tensorflow, illetve python nyelven íródott ugye py a kiterjesztése is a fájlnak, ennek fordításához python könyvtárak szükségesek, ezeket Ubuntu alatt az alábbi módon telepíthetjük:
            <programlisting><![CDATA[
sudo apt update
sudo apt install python3-dev python3-pip
sudo apt-get install python3-matplotlib
sudo pip3 install -U virtualenv
virtualenv --system-site-packages -p python3
source ./venv/bin/activate
pip install --upgrade pip
pip install --upgrade tensorflow
python -c "import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))"
deactivate
            ]]></programlisting>         
            <programlisting language="python"><![CDATA[  
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse

from tensorflow.examples.tutorials.mnist import input_data

import tensorflow as tf

import matplotlib.pyplot


FLAGS = None


def readimg():
    file = tf.read_file("sajat8as.png")
    img = tf.image.decode_png(file, 1)
    return img

def main(_):
  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)

  x = tf.placeholder(tf.float32, [None, 784])
  W = tf.Variable(tf.zeros([784, 10]))
  b = tf.Variable(tf.zeros([10]))
  y = tf.matmul(x, W) + b

  y_ = tf.placeholder(tf.float32, [None, 10])

  cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y, logits=y_))
  train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

  sess = tf.InteractiveSession()

  tf.global_variables_initializer().run()
  print("-- A halozat tanitasa")  
  for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})
    if i % 100 == 0:
      print(i/10, "%")
  print("----------------------------------------------------------")

  print("-- A halozat tesztelese")  
  correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))  
  print("-- Pontossag: ", sess.run(accuracy, feed_dict={x: mnist.test.images,
                                      y_: mnist.test.labels}))
  print("----------------------------------------------------------")
  
  print("-- A MNIST 42. tesztkepenek felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
  
  img = mnist.test.images[42]
  image = img

  matplotlib.pyplot.imshow(image.reshape(28, 28), cmap=matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("4.png")  
  matplotlib.pyplot.show()

  classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

  print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
  print("----------------------------------------------------------")

  print("-- A sajat kezi 8-asom felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")

  img = readimg()
  image = img.eval()
  image = image.reshape(-1, 28*28)

  matplotlib.pyplot.imshow(image.reshape(28, 28), cmap=matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("8.png")  
  matplotlib.pyplot.show()

  image=image.reshape(-1)

  classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

  print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
  print("----------------------------------------------------------")

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--data_dir', type=str, default='/tmp/tensorflow/mnist/input_data',
                      help='Directory for storing input data')
  FLAGS = parser.parse_args()
  tf.app.run()
        ]]></programlisting>    
            A programunk elején beolvassuk a használatos könyvtárakat az import segítségével. Amint láthatjuk a python programozási nyelvben lehetőségünk van használni a from kulcsszót az importálásához, hogy a kódunkban csak az import részt adjuk meg, nem a .-tal elválasztott teljes könytvtár nevet, illetve használhatjuk az as kulcsszót is arra hogy megadjuk milyen néven fogunk hivatkozunk a későbbiekben a használatos könyvtárra, ez is a  könyvtár adatainak egyszerűbb elérését segítő elő. Amint láthatjuk a változók, függvények definiálása egyszerűbb mivel nem kell megadnunk típúusokat, ezáltal a python programozási nyelv az egyszerűbb olvashatóságot előségeti, azonban futási időben gyengébb a hasolnó objektum-orientált programozási nyelvekhez képest. A függvények definiálása a def kulcsszóval történik, a reading függvény beolvassa az általunk elkészített képet majd dekódolja fekete-fehérre és visszaddja egy img változó értékeként. A main függvényben az mnist változóba beolvassuk a tensorflow mnist mappáinak a képeit, ezek közül beolvassuk az összest, mivel a None értéket használtuk ami akármennyi lehet.  
        </para>
             mediaobject>
             <imageobject>
                 <imagedata fileref="mnist.png"></imagedata>
             </imageobject>
         </mediaobject>
    </section>

    <section>
        
