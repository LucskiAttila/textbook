<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Encoding</title>
     <para>
	Fordítsuk le és futtassuk a Javat tanítok könyv MandelbrotHalmazNagyító.java forrását úgy, hogy a fájl nevekben és a forrásokban is meghagyjuk az ékezetes betűket! https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/adatok.html     
     </para>
	<para>
    Virtualbox-szal használok Ubuntu 18.04.3 LTS verzióju operációs rendszert és forditási hiba nélkül lefordul, ha letöltöm és forditom előtte MandelbrotHalmazNagyító néven a MandelbrotHalmazNagyító.java fájlt. Ugye a Java objektum-orientált nyelv igy az egész program egy osztályban van és annak az osztálynak a nevével kell elnevezni a fájlt is amibe van. 
    Windows alatt a fordítás sikeres mivel felismeri a kód karakterkészletét automatikusan. Ubuntu alatt azonban hibát kapunk mivel alapértelmezetten UTF-8 karakterkódolást használ, melynek nem része a magyar nyelv, mivel nem tartalmazza az ékezetes betűket. A magyar ékezetes betűk helyes megjelenítéséhez az encoding kapcsolót kell használnunk fordításkor, mivel ennek seg1tségével megadhatjuk több választék közül hogy melyik karakterkódolást használja a fordító, ami ugye alpértelmezetten az UTF-8-ban és ezt módosítjuk az encoding opcióval windows-1250 karakterkódolásra, amit az Észak-Európa-i nyelvek számára készítettek, ami illik Magyarországon használt ékezetes betűs nyelvre.
    Windows alatt a linket másolva a pdf-ből Microsoft Edge böngészővel 404-es hibakódú hibát kapunk mivel rossz link illesztődik be a böngésző címsorába: https://www.tankonyvtar.hu/hu/tartalom/tkt/javattanitok%20javat/adatok.html. Így átkell javítani a pdf alapján.
	</para>  
	   <mediaobject>
            <imageobject>
                <imagedata fileref="encoding.png"></imagedata>
            </imageobject>
        </mediaobject>
	    	   <mediaobject>
            <imageobject>
                <imagedata fileref="encoding1.png"></imagedata>
            </imageobject>
        </mediaobject>
     </section>
	
     <section>
	     <title>OOCWC lexer</title>
	     <para>
		  Izzítsuk be az OOCWC-t és vázoljuk a https://github.com/nbatfai/robocaremulator/blob/master/justine/rcemu/src/carlexer.ll lexert és kapcsolását a programunk OO struktúrájába!   
	     </para>
	     <para>
	A Robocar Világbajnokság (OOCWC) célja egy közös kutatási platform létrehozása a városi forgalomirányítási algoritmusok kidolgozására, valamint az intelligens városok és a robotautók kapcsolatának vizsgálatára, különös figyelmet fordítva a közeljövőben működő robotautók terjedésére.
	Ahogy a carlexexer.ll fájl nevéből és kiterjesztéséből láthatjuk a programot lexer segítségével használjuk, ami egy lexikai elemzőt generáló program. Pontosabban először beolvassa a bemenetet, majd tokenizálja, lexálja azt, majd generálja az elemzőt C++ nyelven. Lexálás alatt azt értjük hogy egy karaktersorozatot token sorzattá alakítunk át, ehhez a tokeneknek egy név és érték mezőből kell állniuk, melyek segítségével a konvertálás végrehajtódhat. 
	A lexer program felépítése a következő: 
		     {definíciók}
		     %%
		     {szabályok}
		     %%
		     {felhasználói utasítások}
	A CarLexer a FlexLexer alosztálya: figyeli, hogy az egyének milyen úton vannak, illetve hogy egy jármű kísérve van-e. A carlexer.hpp fájlt is includoltuk hogy a benne lévő globális változók értékeit módosíthassuk a programunk segítségével.
	A definíciók részben hozzuk létr a lexáláshoz szükséges tokeneket, melynek megadjuk a nevét amivel azonosítjuk majd a felhasználói utasítások részben, illetve egy sztringet amiből a beolvasott szöveg fog állni. Ahogy például a STAT esetén a <stat sztringet olvassuk be. A WS esetén a /t a whitespacet jelenti, a csillag ugye hogy akárhányszor szerepelhet, akár 0-szor is a + jelöléssel ellentétben ugye. A WORLD esetén a ^ jelölés azt jelenti hogy a mögötte felsorolt karaktereken kívül bármi lehet, a {} pedig hogy a kapcsos zárójel közötti elemből áll a beolvasott karaktersorozat.	     
	A szabályok részben megadjuk hogy az általunk képzett reguláris kifejezések illeszkedése esetén mikre módosuljanak a változók értékei. 
	A felhasználói utasítások részben definiáljuk az yylex függvényt, ami ugye beolvassa a bemenetet az egyes CarLExer objektumokra.
        A lex parancs segítségével hatjsuk végre a lexálást az adott forráskód alapján, ami jelen esetben a carlexer.ll: 
	      </para>
	           <programlisting language = "C++">

          <![CDATA[ 
	     %option c++
%option noyywrap

%{
#define YY_DECL int justine::robocar::CarLexer::yylex()
#include "carlexer.hpp"
#include <cstdio>
#include <limits>
%}

INIT	"<init"
INITG	"<init guided"
WS	[ \t]*
WORD	[^-:\n \t()]{2,}
INT	[0123456789]+
FLOAT	[-.0123456789]+
ROUTE	"<route"
CAR	"<car"
POS	"<pos"
GANGSTERS	"<gangsters"
STAT	"<stat"
DISP	"<disp>"
%% 
{DISP}					{
					  m_cmd = 0;
					}
{POS}{WS}{INT}{WS}{INT}{WS}{INT}	{
					  std::sscanf(yytext, "<pos %d %u %u", &m_id, &from, &to);
					  m_cmd = 10001;
					}
{CAR}{WS}{INT}				{
					  std::sscanf(yytext, "<car %d", &m_id);
					  m_cmd = 1001;
					}
{STAT}{WS}{INT}				{
					  std::sscanf(yytext, "<stat %d", &m_id);
					  m_cmd = 1003;
					}
{GANGSTERS}{WS}{INT}			{
					  std::sscanf(yytext, "<gangsters %d", &m_id);
					  m_cmd = 1002;
					}
{ROUTE}{WS}{INT}{WS}{INT}({WS}{INT})*	{
				  int size{0};
				  int ss{0};
				  int sn{0};				  
				  
				  std::sscanf(yytext, "<route %d %d%n", &size, &m_id, &sn);
				  ss += sn;
				  for(int i{0}; i<size; ++i)
				  {
				    unsigned int u{0u};
				    std::sscanf(yytext+ss, "%u%n", &u, &sn);
				    route.push_back(u);
				    ss += sn; 				    
				  }
				  m_cmd = 101;
				}
{INIT}{WS}{WORD}{WS}("c"|"g")	{
				  std::sscanf(yytext, "<init %s %c>", name, &role);
				  num = 1;
				  m_cmd = 0;
				}
{INIT}{WS}{WORD}{WS}{INT}{WS}("c"|"g")	{
				  std::sscanf(yytext, "<init %s %d %c>", name, &num, &role);
				  if(num >200)
				  {
				    m_errnumber = 1;
				    num = 200;
				  }
				  m_cmd = 1;
				}				
{INITG}{WS}{WORD}{WS}("c"|"g")	{
				  std::sscanf(yytext, "<init guided %s %c>", name, &role);
				  num = 1;
				  m_guided = true;
				  m_cmd = 3;
				}
{INITG}{WS}{WORD}{WS}{INT}{WS}("c"|"g")	{				  
				  std::sscanf(yytext, "<init guided %s %d %c>", name, &num, &role);
				  if(num >200)
				  {
				    m_errnumber = 1;
				    num = 200;
				  }
				  m_guided = true;
				  m_cmd = 2;
				}								
.				{;}
%%

int yyFlexLexer::yylex(){return -1;}            
           ]]>

        </programlisting>
	<mediaobject>
            <imageobject>
                <imagedata fileref="oocwclexer.png"></imagedata>
            </imageobject>
        </mediaobject>
		     	<mediaobject>
            <imageobject>
                <imagedata fileref="oocwclexer1.png"></imagedata>
            </imageobject>
        </mediaobject>
	</section>
	
	<section>
    <title>l334d1c45</title>
        <para>
	Írj olyan OO Java vagy C++ osztályt, amely leet cipherként működik, azaz megvalósítja ezt a betű helyettesítést: https://simple.wikipedia.org/wiki/Leet (Ha ez első részben nem tetted meg, akkor írasd ki és magyarázd meg a használt struktúratömb memóriafoglalását!)	
	</para>
 <para>
      	A struktúratömb mértetének vizsgálatához a l337d1c7.l fájlból az alábbi struktúra szükséges:
	struct chiper {
		char c;
	 	char* leet[4]; }
	Az osztályból létrejövő objektumok mértetét meghatározhatjuk egy egyszerű számítással ógy hogy tudjuk hogy egy char típus 1 bájtot foglal, a char* pedit 8 bájtot, de ebből 4 van így a képletünk 1+4*8 ami 33 bájt lenne. Ha viszont a size függvénnyel határozzuk meg a tényleges méretet érdekes módon nem 33-at kapunk, hanem 40-et. Erre a magyarázat a padding jelenség, amit a fordító automatikusan végez. A padding azt jelenti hogy ha a egy struktúra elem előtt vagy mögött van egy nagyobb méretű elem akkor a kisebb méretű elem mérete módosul a nagyobbéra. Ezt a plusz tárhelyfoglálsi módszert a címzésből adódó hibák elkerülése végett találták ki. Így jön ki a 40 bájt mivel a char memóriamérete 8 bájtra módosult. A paddingot kikapcsolhatjuk a #pragma pack(1) macro segítségével, így a várt 33 bájt méretet kapjuk.                               		
	A leet nyelv szleng nyelvek közé sorolható nyelvtanilag, ez egy az internetes felületeken kialakult nyelv, ami az angol abc betúire alapszik, a készített chiperben az adott linkről https://simple.wikipedia.org/wiki/Leet vettem ki a karaktereket, de csak az angol abc betűkre vonatkozó részt, mivel a többi már tartalmaz különböző szmájlikat is.
	A karaktereket a kódjukkal együtt egy vektorba raktam, pontosabban a leet nevű vektorba a put parancsot használva. A feladat alapján java vagy c++ nyelven kellett írnunk, ezek közül mindketttő tartalmaz vektorokat. A vektor típusa fontos hogy Hasmap legyen ami beépített strujtúrája a java nyelvnek és importolni kell, ez térképezi a cserét. A StringBuilder osztályhoz hozunk létre minden karakter esetén egy objektumot, melynek értéke vagy nem változik vagy egy random generátor segítségével kiválasztott karakter lesz, melyet az append függvény segítségével adunk az aktuális sb objektumhoz. E művelet elvégzése után a Leet Encode függvény visszatérési értéke az aktuális sb objektum azaz karakter memóriacíme lesz. A random generátornál fontos hogy akkora számot generáljunk ahány karakter van az aktuális karakterhez, habár ez mindenütt 4, még ahol egyezik is a karakter. Majd a main függvényben beállítjuk hogy beolvassa a bemenetet soronként és meghívja a karaktervizsgáló Encode függvényt, majd kírja az eredményt a getLeet függvény segítségével ugye soronként egy végtelen függvény segítségével.                          
	 
</para>
<programlisting language = "Java">
          <![CDATA[
import java.io.BufferedReader; 
import java.io.IOException; 
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
class Leet{        
private HashMap<String, String[]> leet = new HashMap<String, String  -
[]>() {{
put("A", new String[] { "4", "4", "@", "-" });
put("B", new String[] { "b", "8", "3", "}" });
put("C", new String[] { "c", "(", "", "{" });
put("D", new String[] { "d", ")", "]", "}" });
put("E", new String[] { "3", "3", "3", "3" });
put("F", new String[] { "f", "=", "ph", "#" });
put("G", new String[] { "g", "6", "[", "[+" });
put("H", new String[] { "h", "4", "-", "[-]" });
put("I", new String[] { "1", "1", "", "!" });
put("J", new String[] { "j", "7", "_", "_" });
put("K", new String[] { "k", "", "1", "{" });
put("L", new String[] { "l", "1", "", "_" });
put("M", new String[] { "m", "44", "(V)", "" });
put("N", new String[] { "n", "", "", "V" });
put("O", new String[] { "0", "0", "()", "[]" });
put("P", new String[] { "p", "o", "D", "o" });
put("Q", new String[] { "q", "9", "O_", "(,)" });
put("R", new String[] { "r", "12", "12", "2" });
put("S", new String[] { "s", "5", "$", "$" });
put("T", new String[] { "t", "7", "7", "’’" });
put("U", new String[] { "u", "_", "(_)", "[_]" });
put("V", new String[] { "v", "", "", "" });
put("W", new String[] { "w", "VV", "", "()" });
put("X", new String[] { "x", "%", ")(", ")(" });
put("Y", new String[] { "y", "", "", "" });
put("Z", new String[] { "z", "2", "7_", "_" });
}};
 	public Leet Encode() {
StringBuilder sb = new StringBuilder();
for (int i = 0; i < word.length(); ++i) {
char c = word.charAt(i);
String loc = Character.toString(Character.toLowerCase(c));
if (leet.containsKey(loc))
sb.append(leet.get(loc)[rand.nextInt(leet.get(loc).length)]);
else
sb.append(c);
}
this.sb = sb.toString();
return this;
}
	public static void main(String[] args) {
Scanner console = new Scanner(System.in);
String word;
while (true) {
word = console.nextLine();
System.out.println(new Leet(word).Encode().getLeet());
}
}
}
        ]]>
        </programlisting>
	<mediaobject>
            <imageobject>
                <imagedata fileref="l334d1c45.png"></imagedata>
            </imageobject>
        </mediaobject>
	</section>

    <section>
        <title>Full screen</title>
     <para>	    
	     Készítsünk egy teljes képernyős Java programot! Tipp: https://www.tankonyvtar.hu/en/tartalom/tkt/javat-tanitok-javat/ch03.html#labirintus_jatek
     </para>
	<para>
		Mivel grafikus beáll1tások elvégzését igényli a program 1gy valamilyen kiegészírőt kell használnunk hozzá. A programot a JavaFX platform seg1tségével készítettem el, ahogy az látszik az import-olt osztályok nevéből is. A programsegítségével egy tetszőleges méretű img.png nevű képet tudunk teljesképernyős méretre átméretezni. A kép teljesképernyőn történő megjelenítéséhez a főkijelzőt, legfőbb osztály méretén kell állítanunk. Nyilván nem csak egységes képernyőméretek léteznek így hogy teljesen magától működjön hasznos hogy van teljes képernyő beállítására vonatkozó boolen típúsu vátozó, egyébként is operációs rendszer szinten is értelmezett a teljes képernyőre rakás, így itt is lehetséges. A főablakkal sajnos a kép pixele nem módosul automatikusan így létrehozunk egy 2 dimenziós téglalapot melynek méret-tulajdonságai megeyeznek a teljesképernyős főképernyőjével, így kisebb konvertálgatás után már módosíthatjuk is a kép méretét is. Majd a Scense objektum segítségével beállítunk egy színpadot a képnek, amit szülő-osztályának állítjuk be örökli a tulajdonságait, hogy az futtatás után a teljes képernyőből
		az ESC billenytű lenyomásásval kitudjunk lépni, pontosabban 600x600-as képet kapunk.
	</para>
	<programlisting language = "Java">
          <![CDATA[    
import java.io.File;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.geometry.Rectangle2D;
import javafx.stage.Screen;
public class Controller extends Application {
@Override
public void start(Stage primaryStage) {
Rectangle2D screenBounds = Screen.getPrimary().getBounds();
primaryStage.setTitle("Fullscreen"); 
primaryStage.setFullScreen(true);
StackPane root = new StackPane();
Scene scene = new Scene(root, 600, 600);
File file = new File("img.png");
Image image = new Image(file.toURI().toString());
ImageView iv = new ImageView(image);
iv.setPreserveRatio(true);
iv.setFitHeight( screenBounds.getHeight() );
iv.setFitWidth( screenBounds.getWidth() );
root.getChildren().add(iv);
primaryStage.setScene(scene);
primaryStage.show();
}
public static void main(String[] args) {
Application.launch(args);
}
}  
        ]]>
        </programlisting>
	<mediaobject>
            <imageobject>
                <imagedata fileref="fullscreen.png"></imagedata>
            </imageobject>
        </mediaobject>
	</section>	    

<section>
        <title>Perceptron osztály</title>
     <para>
	Dolgozzuk be egy külön projektbe a projekt Perceptron osztályát! Lásd https://youtu.be/XpBnR31BRJY     
     </para>
	<para>
		A projekt elkészítéséhez szükséges telepíteni az alábbi kiegészítőket: a libpng dev könyvtárát és a png++ könyvtárat. A program alapját a nashorn projektből kimásolt Perceptron oszály adja. A kód elején beállítjuk a using namespace std,png parancsokkal hogy ne kelljen folton jelenzi az ősosztályt, majd kétrehozunk egy image típúsu rgb színkódolású képet ugye a png_image vektor néven az első parancssori argumentumból. Majd létrehozzuk a size egész típúsu változót, ami a kép méretét azaz pixel-területét adja meg az ismert matematikai képlet alapján, tehét szélesség*magasság. Ezen értékek a get_with és get_height függvények visszatérési értékei lesznek, a beolvasott képre vonatkozóan. Majd létrehozzuk a p nevű Perceptron osztály objektumot, a konstruktorának segítségével. Ez a perceptron 3 rétegű és egy kimeneti csomópontból áll, az egyes rétegek size változó értéke, 256, 1 szálakból állnak. Majd a számításhoz szükséges mátrix formára alakítjuk az adatokat, melyetket a heapen tárolunk a gyors számítás érdekében, majd ezeket a hleyeket felszabadítjuk a delete függvény segítségével manuálisan. A double típúsu value változóba mentjük a perceptron számítás eredményét, amit megjelnítünk a cout függvénnyel a szabványos kimeneten.
		Futtatáshoz az alábbi parancsot használjuk a terminálba Ubuntu rendszereken: g++ mlp.hpp main.cpp -o test -lpng -std=c++11 , feltételezve hogy main.cpp néven hoztuk létre a programunkat.
		A perceptron mesterséges neuronokból épül fel hasonlóan az emberi agyi neuronokhoz és amelynek értéke a belefutó neuronok értékeinek sólyozott összege.
	</para>	
	<programlisting language = "C++">
          <![CDATA[ 	 
	#include <iostream>
#include "png++/png.hpp"
#include "mlp.hpp"
using namespace std;
using namespace png;
int main ( int argc, char *argv[] )
{
image <rgb_pixel> png_image (argv[1]);
int size = png_image.get_width() * png_image.get_height();
Perceptron* p = new Perceptron(3, size, 256, 1);
double* image = new double[size];
for (int i{0}; i < png_image.get_width(); i++)
for (int j{0}; j < png_image.get_height(); j++)
image[i * png_image.get_width() + j] = png_image[i][j].red;
double value = (*p)(image);
cout <<" "<< value << endl;
delete p;
delete [] image;
}
        ]]>
        </programlisting>	
	<mediaobject>
            <imageobject>
                <imagedata fileref="perceptron.png"></imagedata>
            </imageobject>
        </mediaobject>
	</section>

	
	
