<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gödel!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Gengszterek</title>
        <para>
             Gengszterek rendezése lambdával a Robotautó Világbajnokságban https://youtu.be/DL6iQwPx1Yw (8:05 től)              
        </para>
        <para>
           A Robocar Világbajnokság (OOCWC) célja, hogy közös kutatási platformot kínáljon a városi forgalomirányítási algoritmusok kidolgozására, valamint az intelligens városok és a robotautók közötti kapcsolat vizsgálatára, különös figyelmet fordítva a közeljövőbeli robotkocsikra. 
           Ebben az OOCWC projektben használunk egy gyors rendezést a sort beépített függvény segítségével, melyet kétféleképpen használhatunk aszerint hogy megadjuk e a rendezési függvényt vagy nem. Fontos hogy a rendezéshez megadott függvény bool visszatérési értékű és kétparaméteres legyen melyeken nem módosít. A sort függvény első paramétere a rendezni kívánt lista első eleme, a második parmamétere a lista utolsó eleme, a harmadik opcionális ugye a rendező függvény. 
           Jelen esetben ugye a gengsztereket kell rendeznünk így a gangsters vektort használjuk fel a sort függvényben mivel ebben tároljuk a gengsztereket. A rendezéshez a vektor első és utolsó elemére lesz szükségünk mivel az összes gengsztert rendezzük, ehhez a vektorra hívjuk meg a begin és end függvényeket. Majd  mivel a gegngsztereket a rendőröktől való távolságuk alapján akarjuk rendezni, így szükségünk lesz egy harmadik paraméterre is, egy rendező függvényre. Ehhez használjuk a már ősosztályban megírt dst függvényt, azonban ezt egy függvénybe kell beleírnunk, erre használhatjuk a lambda azaz névtelen függvényeket, mivel erre a függvényre csak most lesz szükségünk, ennek a szintaktikája a következő:
                [](paraméterek)-> visszatérési típusa {utasítások}            
           A [] jelek közt függvényen kívüli objektumokat adhatunk meg, a visszatérési értéket nem kötelező megadni ekkor void lesz ha nem ad eredmént a függvény egyébként  egyértelműen meghatározhatónak kell lennie, mint jelen esetben az egyenlőtlenségi vizsgálatnak a bool lesz. A belső, új paraméterek a két gengszter, a külső, már meglévő a rendőrök ami az összehasonlításhoz szükséges, illetve az aktuális objektum ami az összehasonlítást segítő függvényhez.
           A feladatban a gengsztereket a rendőröktől való távolságuk alapján rendezzük növekvő sorrendben. A lambda függvények előnye hogy nem kell elneveznünk, de ezáltal nem hívhatjuk meg később őket, de így kevesebb táhelyet is igényelnek. 
        </para>
        <programlisting language="c++">
<![CDATA[
std::vector<Gangster> gangsters;
[...]
std::sort ( gangsters.begin(), gangsters.end(), [this, cop] ( Gangster x, Gangster y )
{
    return dst ( cop, x.to ) < dst ( cop, y.to );
} );
]]>
        </programlisting>
    </section>
    
    <section>
        <title>C++11 Custom Allocator</title>
        <para>
            https://prezi.com/jvvbytkwgsxj/high level programming languages 2 c11 allocators/ a CustomAlloc os példa, lásd C forrást az UDPROG repóban!              
        </para>
        <para>
            C++ progrmozási nyelvben ha létrehozunk egy objektumot akkor memóriát foglalunk le, ezt manuálisan végezzük el a new kulcsszó segítségével. Ezt a memóriafoglalást úgynevezett allokátorok végzik, az alpértelmezett allokátor az std::allocatorkisebbT>. Azonban a C++11 verziója óta mi is létrehozhatunk saját allocatorokat úgynevezett custom allocator-t, ekkor ezt használja a fordító a standard allocator helyett.
            A feladatban használjuk a template kisebbtypname azonosító> segítségével elérjük hogy a mögötte defifinált függvénynek a paramétereként használjuk az azonosító értékét, így nincs szükségünk konstruktor definiálásra. A using álnév = név segítségével megadjuk hogy milyen néven hivatkozhatunk majd az egyenenlőségjel jobb oldalán álló kifejezésre, ezzel egyszerűbben hivatkozunk rá. Az allocate beépített függvényt felüldefinálva használjuk hogy a paramétereként kapott típúsból lefoglalt n darab memóriacím helyett a visszatérési értékét a return kifejezésben manuálisan számítjuk ki és ez lesz a visszatérési értéke, illetve kiíratjuk a függvény által lefoglalt helyek számát, a lefoglalt bájtok számát, majd az adott típus name magolt és demangolt nevét. A name mangle-t a fordító végzi automatikusan hogy linker megkülönböztesse az egyes neveketet és minnél töb szemantikai információt adjon át, például a void pelda(int i, char b) függvényt FvicE-re nevezi át. Ezt a nevet a typedid(pelda).name() függvény adja meg, az FvicE-ben a v a void azaz a visszatérési érték típusa, az i az int az első paraméter típusa, a c a char a második paraméter típusa. A __cxa_demangle függvény az eredeti azza a demangle-s névre ad vissza egy mutatót, ennek a címét állítsuk egy p változójéra, a függvény első paramétere a visszafejtendő név, a második a memóriacím ahova mentjük a demangolt nevet, 0 esetén automatikusan allokál a malloc függvénnyel, a harmadik parméter a demangle-t név hossza, 0 esetén nem veszi figyelembe, a negyedik paraméter egy egész szám ami a státuszt adja vissza: 0 esetén sikerült a demangle, -1 esetén memóriafoglalási hiba, -2 esetén mangled_name azaz az első paraméterként megadott név hibás, -3 esetén az egyik függény argumentum hibás. A reinterpret_cast kisebbdata_type *>(pointer_variable) függvény segítségével módosítjuk a argumentumként kapott mutató értékét a parméterként megadott adattípusra. A p változó által foglalt memóriát felszabadítjuk a free függvénnyel. Fontos hogy a free-vel a malloc, calloc által foglalt memóriát szabadítsuk fel mivel C programozási nyelvből átvett, a delete viszont a new kulcsszó által lefoglaltakat. A void deallocate (pointer p, size_type n) függvény segítségével felszabadítjuk az allocate függvény által foglalt memóriaterületet, amit az első paraméter azonosít, a második parméterként pedig az allokátor álltal lefoglalt memóriamenyiséget adjuk meg. A deallocate függvényben is az allocate-hez hasonló információkat írunk ki a szabványos kimenetre. A porgramunkat egy 16 elemszámú vektoron teszteljük, melynek definiálásakor megadjuk hogy egész típúsu értékekből áll majd és memóriafoglaláshoz a mi allokátorunkat használja, így függvényhívás nélkül automatikusan használja avektor a memóriakezeléshez. 
            A program futtatása után észrevehetjük a vektor dinamikusan foglal helyet a memóriában azaz akármennyit lefoglalhat úgyhogy ha megtelik a lefogalalt tárhely akkor duplaannyit foglal le és módosítja a régi címeket az ójéra, persze ezt a reserve függvénnyel felülírhatjuk. 
         </para>    
                <programlisting language="c++">
<![CDATA[
#include <vector>
#include <stddef.h>
#include <cxxabi.h>
#include <iostream>


template<typename T>
class CustomAlloc
{
public:
    CustomAlloc() {}
    CustomAlloc(const CustomAlloc&) {}
    ~CustomAlloc() {}

    using size_type = size_t;
    using value_type = T;
    using pointer = T*;
    using const_pointer = const T*;
    using reference = T&;
    using const_reference = const T&;
    using difference_tyoe = ptrdiff_t;

    pointer allocate( size_type n){
        int s;
        char* p = abi::__cxa_demangle( typeid (T).name(), 0, 0, &s);
        std::cout << "Allocating "
                  << n << " objects of "
                  << n*sizeof (T)
                  << " bytes. "
                  << typeid (T).name() << "=" << p
                  << std::endl;
        delete p;
        return reinterpret_cast<T*>(new char[n*sizeof(T)]);
    }

    void deallocate (pointer p, size_type n){
        delete[] reinterpret_cast<char *>(p);
        std::cout << "Deallocating "
                  << n << " objects of "
                  << n*sizeof (T)
                  << " bytes. "
                  << typeid (T).name() << "=" << p
                  << std::endl;

    }
};
]]>
        </programlisting>   
            
            <mediaobject>
            <imageobject>
                <imagedata fileref="custom.png"></imagedata>
            </imageobject>
        </mediaobject>
    </section>

    <section>
        <title>STL map érték szerinti rendezése</title>
        <para>
            Például: https://github.com/nbatfai/future/blob/master/cs/F9F2/fenykard.cp p#L180
        </para>
        <para>
            Az STL azaz a Standard Template Libary-nek a része a map típúsu adatszerkezet, ami két elemtípusból áll egy kulcsból és egy értékből. A kulcsok egyediek, azaz egy mapen belül egyszer fordulhatnak elő és a map értékei kulcsszerint növekvő sorrendben vannak. A jelen példában a fénykard.cpp fájlban az egyes hallgatók azonosítója van a hozzájuk tartozó jegyekkel, ezt a tábláazatot akarjuk rendezni jegyek azaz érték szerint. Erre azonban nincs lehetőségünk mivel nem támogatja az std::sort rendezést, de használhatjuk az std::pair típust melynek segítségével a vektorok elemeit a map-hez hasonlóan párokban tárolhatjuk. Létre is hoztunk egy sort_map nevű függvényt melynek visszatérési értéke egy sztring, egész értékpárokból álló vektor, bemenete pedig egy map hasonló típúsu paraméterekkel, azaz sztring-egész értékpárokból álló map memóriacíme. A függvényben létre is hozunk egy sztring,egész párokból álló vektort ordered néven, majd a megszokott módon az auto andi : mapneve segítségével végigmegyünk a paraméterül kapott map elemein, úgy hogy ha a map második eleme azaz az értéke létezik, akkor létrehozunk egy párt p néven a vektor adott kulcs-érték párjéból majd a pushback függvényt meghívjuk az ordered vektorra p paraméterrel így eleme lesz a vektornak p. Az if feltételes ellenőrzésre valószínüleg azért van szükség mert nem minden hallgatónak van jegye, őket azonban nem kezeltük. Majd az std::sort függvénnyel sorba rendezzük a vektort a második értékei alapján csökkenő sorrendben. Jelen példában a begin és end függvényeket zárójeles alakban használjuk pontozott helyett, illetve a lambda függvényt most [=] jellel használjuk mivel a környezeti változókat most másolással vesszük át nem memóriacímmel. Az auto kifejezést C++11 óta vezették be ennek segítségével a fordító automatikusan kitalálja a változók típusát. Majd a sort_map függvény visszatérési értéke az ordered vektor lesz. Majd a main függvényben az insert kifejezéssel feltöltjük adatokkal a map-ünket a rendezéshez, majd használjuk a megírt függvényünket a rendezéshez és kiiratjuk a létrehozott rendezett vektor elemeit a szabványos kimentere.                    
        </para>    
        <programlisting language="c++">
<![CDATA[   
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

vector<pair<string, int>> sort_map(map <string, int>& rank)
{
	vector<pair<string, int>> ordered;

	for (auto& i : rank) {
		if (i.second) {
			pair<string, int> p{ i.first, i.second };
			ordered.push_back(p);
		}
	}

	sort(
		begin(ordered), end(ordered),
		[=](auto&& p1, auto&& p2) {
			return p1.second > p2.second;
		}
	);

	return ordered;
}

int main() {
	map <string, int> rank;

	rank.insert(pair<string, int>("Alma", 65));
	rank.insert(pair<string, int>("Körte", 33));
	rank.insert(pair<string, int>("Szilva", 55));
	rank.insert(pair<string, int>("Barack", 28));
	rank.insert(pair<string, int>("Vegyes", 80));

	vector<pair<string, int>> res = sort_map(rank);

	for (auto& i : res)
		cout << i.first << " " << i.second << endl;

	return 0;
}
  ]]>
        </programlisting>   
            <mediaobject>
            <imageobject>
                <imagedata fileref="stl.png"></imagedata>
            </imageobject>
        </mediaobject>        
        </section>
            
        <section>
        <title>Alternatív Tabella rendezése</title>
        <para>
	    Mutassuk be a https://progpater.blog.hu/2011/03/11/alternativ_tabella a programban a java.lang        
	</para>
        <para>
	    A feladatban a magyar labdarúgó bajnokság eredményeit alternatívan rendező program rendezési algoritmusát elmezzük. Ez a hagyományos rendezéstől annyiban tér el hogy itt figyelembe vesszük hogy az adott csapat milyen erősségű csapattal megy meccset, így nem ugyanannyit ér egy győzelem pédául a leggengébb csapat ellen ha a legerősebb csapatot hasonlítjuk. Ez a módszer hasonlít a PageRank algoritmushoz csak itt oldalak mutatása helyett csapatok legyőzése van. Tehát a pontokat nem a hagyományos módon határozzuk meg hogy a győzelem 3, vereség 0, döntetlen 1, hanem a győztes csapat 1 pontot kap, a vesztes nem kap pontot, döntetlen sesetén 1-1 pont jár. Ezzel a wikipédiáról átmásolt kereszttáblázatból számítjuk ki pontokat majd a PageRank algoritmussal meghatározzuk a végpontokat, az így kapott tábláazatot pedig rendezzük csökkenő sorendben és kiiratjuk a szabványos kimenetre. A PageRank algoritmussal már korábban foglalkoztunk. A feladatban az értékpárokat most objektumokkal kezeljük, tehát a kiszámolt pontokhoz amik már egy egydimenziós tömbben tárolódnak összevonjuk a hozzátartozó csapatneves táblázathoz, ezért fontos hogy a program elején a két mátrixban a csapatok sorrendje eggyezzen. Ahhoz hogy az objektuomokból álló listát rendezzük a sort függvénnyel az objektumunknak ősosztályának kell lennie a Comparable osztálynak, ehhez viszont override-olnunk kell a comperTo függvényt melynek a lényege hogy 3 visszatérési értéke legyen hogy ha az aktuális objektum kisebb a Comparable-s objektumtól akkor -1, ha nagyobb akkor 1, ha egyenlő akkor 0. Ahogy láthatjuk a feladatunkban is így csináltuk, így már hibaüzenet nélkül rendezhetjük a sort függvénnyel az objektumokból képztt listát melyet a java.util.Arrays.asList() függvénnyel hozunk létre. A sort-os rendezés után ha meghívjuk a reverse függvényt a rendezett listára akkor a rendezett lista ford1tottját kapjuk vissza, theát a jelen feladatban megkapjuk a pontok szerint csökkenő sorrendben a csapatok neveivel  a pontos listát. A feladathoz a https://hu.wikipedia.org/wiki/2018–2019-es_magyar_labdarúgó-bajnokság_(első_osztály) kereszttáblázatát használtam.	
	</para>	
        <programlisting language="c++">
<![CDATA[ 		    
class Csapat implements Comparable<Csapat> {

  protected String nev;
  protected double ertek;

  public Csapat(String nev, double ertek) {
    this.nev = nev;
    this.ertek = ertek;
  }

  public int compareTo(Csapat csapat) {
    if (this.ertek < csapat.ertek) {
      return -1;
    } else if (this.ertek > csapat.ertek) {
      return 1;
    } else {
      return 0;
    }
  }
}
  ]]>
        </programlisting> 
            <mediaobject>
            <imageobject>
                <imagedata fileref="alt1.png"></imagedata>
            </imageobject>
        </mediaobject> 
	    <mediaobject>
            <imageobject>
                <imagedata fileref="alt3.png"></imagedata>
            </imageobject>
        </mediaobject> 	
    </section>
		
    <section>
        <title>Prolog családfa</title>
        <para>
	    Ágyazd be a Prolog családfa programot C++ vagy Java programba! Lásd para_prog_guide.pdf!
	</para>
        <para>		
            A Prolog családfa program egy pl kiterjesztésű fájl, így prolog programozási nyelvet használtuk a megírásához, ez látszik a kódból is mivel formulákból épül fel, amiket az elsőrendű logikából tanult módon értelmezhetünk. A programban a férfi(nándi) alakú kifejezéseket tényeknek nevezzük, az apa(X) :- férfi(X), gyereke(_Y, X). alakú kifejezéseket szabályoknak nevezzük. Ezeket predikátumként értelmezzük, tehát nándi férfi illetve apa ha férfi és van gyereke. A prolog programozási nyelv volt az első logikai programozási nyelv amit 1972-ben fejlesztettek ki. A lényege az hogy a program bemenete egy célformula és többi formulákból áll, ahol a kimenetet az adja hogy a célformula következménye e a többi formulának. Tehát ez egy deklreatív programozási nyelv ami annyit jelent hogy ugye nem algoritmusokat adunk meg hogy mitkezdjen a program az adatokkal, hanem a végeredményt és ezt ellenőrzi hogy helyes e. A feladat elvégzéséhez java programozási nyelvet használtam, ehhez a suo apt install-lal telepítenünk kell a swi-prolog-java	csomagot, ami egy interfészt biztosít a prolog rendszerrel való komminikációhoz. Emelett szükséges letölteni a https://jar-download.com/?search_box=jpl7 fájlt, majd kicsomagolni és az org almappáját átmásolni abba a mappába ahol a forráskódunk van, így már tudjuk import a Query és Term osztályokat. A programban előszor beolvassuk egy sztringbe a prolog féjlunkat azaz a family.pl-t, így ennek is egy appában kell lennie a programunk mappájával, majd létrehozunk egy Query objektumot ezzel végezhetünk lekérdezéseket formula igazszágértékekre vagy változó értékekre. Az első esetben a hasSolution függvényt meghívva kérjük le az igazságértékét a q formulának azaz azt hogy sikeresen hozzáfért e a fájlhoz, az eredményt a szabványos kimeneten kapjuk meg mivel a println függvénybe hívtuk meg a hasSolution függvényt. Ebben az esetben csak true értéket fogjuk látni, mert ha nem éri el a program a megadott prolog fájlt akkor kilép hibaüzenettel. A t2 példában azonban már láthatnánk a true/false visszatérési értékét a hasSolution függvénynek, de ?: feltételes operátorral overridoljuk a kimenetet provable/not provable-ra. Ebben a példában lekérdezzük azt hogy gréta apa -e, nyilván nem mivel nem fiú és ugy e a feltétel hogy fiú legyen és gyereke legyen gréta. A t3-as példában matyi nagyapjait kérdezzük le, azaz az anyjának vagy az apjának az apját, az apja pedig ha matyi gyereke X-nek és X férfi is, anyja pedig ha matyi gyereke X-nek és X nő. Ennek az X változónak kiíratjuk az összes értékét, úgy hogy hasMoreSolution függvényt meghívva az objektumra paraméterül adjuk egy while ciklusnak így addig fut amíg van másik megoldás azaz true a hasMoreSolution függvény visszatérési értéke. A ciklusmagban pedig beírjuk egy Map-be a nextSolution azaz következő megoldást, majd kiíratjuk a get függvénnyel a szabványos kimenetere a println paramétereként. Ugyanezt az eredményt kapnánk ha elhagynánk a Map-et és a Query objektumra hívnánk meg a nextSolution().get(X) függvényeket. A t5 sztring esetén kiíratjuk az első megoldását a formulának azaz az X változó első lehetséges értékét a oneSolution() függvény segítségével. A t4 lekérdezéseket a t3 és t5 lekérdezéshez hasonlóan implementáltuk és a nagyapa(X) fromula összes értékét íejuk ki X-ben, azaz azokat az X-eket amelyek elüször megnézik az összes férfit akinek van gyereke, majd azokat a férfiakat és nőket akiknek van gyereke és apjuk a férfi azaz gyerekük a férfinak. A t6 lekérdezésben az előzőektől eltérő módon iratjuk ki az X változó értékeit mégpedig úgy hogy allSolution függvénnyel elmentjük az összes megoldását az X változónak egy Map-be melynek elemeit egy for ciklussal kiíratunk a szabványos kimenetre a println függvény segítségével. A t7 formula lekérdezése hasolnóan működik mint a t3 formula lekérdezése. A Query objektumok létrehozása elhanyagolható mivel nem akarjuk később használni az lekérdezést, illetve akkor is meghívhatjuk újra a sztringünkre. Ennek akkor lenne jelentősége ha egy sztring objektummal használnánk az összes lekérdezést és ekkor a lekérdezéseket formuláit sztringek helyett Query objektumokban tárolnánk, így a Query objektumok létrehozását manuálisan kezelnénk az általunk választott névvel.                                                                                                                                                                       
	</para>	
        <programlisting language="java">
<![CDATA[ 
import java.util.Map;
import org.jpl7.Query;
import org.jpl7.Term;

public class PrologFamily {

    public static void main(String[] args) {

        String s = "consult('family.pl')";
        Query q = new Query(s); //the exception is thrown here
        System.out.println(q.hasSolution());

        String t2 = "apa(gréta)";
        System.out.println(t2 + " is " + (Query.hasSolution(t2) ? "provable" : "not provable"));
        
        String t3 = "nagyapja(X, matyi)";
        System.out.println("each solution of " + t3);
        Query q3 = new Query(t3);
        while (q3.hasMoreSolutions()) {
            Map<String, Term> s3 = q3.nextSolution();
            System.out.println("X = " + s3.get("X"));
        }        

        String t4 = "nagyapa(X)";
        System.out.println("first solution of " + t4 + ": X = " + Query.oneSolution(t4).get("X"));
        
        System.out.println("each solution of " + t4);
        Query q4 = new Query(t4);
        while (q4.hasMoreSolutions()) {
            Map<String, Term> s4 = q4.nextSolution();
            System.out.println("X = " + s4.get("X"));
        }

        String t5 = "szülő(X)";
        System.out.println("first solution of " + t5 + ": X = " + Query.oneSolution(t5).get("X"));

        String t6 = "testvér(matyi, X)";
        Map<String, Term>[] ss6 = Query.allSolutions(t6);
        System.out.println("all solutions of " + t6);
        for (int i = 0; i < ss6.length; i++) {
            System.out.println("X = " + ss6[i].get("X"));
        }
        
        String t7 = "gyereke(X, norbi)";
        System.out.println("each solution of " + t7);
        Query q7 = new Query(t7);
        while (q7.hasMoreSolutions()) {
            Map<String, Term> s7 = q7.nextSolution();
            System.out.println("X = " + s7.get("X"));
        }        
    }

}
  ]]>
        </programlisting> 
	<mediaobject>
            <imageobject>
                <imagedata fileref="prolog.png"></imagedata>
            </imageobject>
        </mediaobject> 
    </section>        
</chapter>
