<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
 <section>
        <title>Reverse engineering UML osztálydiagram</title>
        <para>
              UML osztálydiagram rajzolása az első védési C++ programhoz. Az osztálydiagramot a forrásokból generáljuk (pl. Argo UML, Umbrello, Eclipse UML) Mutassunk rá a kompozíció és aggregáció kapcsolatára a forráskódban és a diagramon, lásd még: https://youtu.be/Td_nlERlEOs https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_6.pdf (28 32 fólia)
        </para>       
        <para>
              Az UML programozási nyelv egy objektum orientált modellező nyelv, melynek segítségével nagy méretű programokat vizualizálhatunk modellezés eszközével. A modellezés eszközével különböző szüveges és grafikus modellek készíthetőek, például osztálydiagramok amit a feladat is kér tőlünk. Az osztálydiagram egy statikus modell, ami tartalmazza a programunk jelen esetben a binfa program osztályait, annak attribitumaival együtt és az osztályszintű kapcsolatokat. Az osztélyoknak ugye vannak attributumai amik az osztály adatokkal leírható tulajdonságainak felsorolása és vannak operációi amik az osztály példányain végezhető műveletek felsorolása. Az attribitumok felépítése a következő: láthatóság név : típus = alapérték, ahol a láthatóságot az alábbi karakterek jelölik: + public vagy # protected vagy ~ csomagszintű vagy - private. Az operáció jelölése: láthatóság név(param) : típus{comment}. Az osztályok közötti vonalat áltlában egy egyszerű vonal jelöli, ezt asszociációnak nevezzük. A feladat szerint vizsgálnunk kell az aggregációt és a kompozíciót is. A kompozíció esetén a tartalmazott önmagában nem létezhet, csak valaminek a részeként, az aggregációnál viszont a rész hozzátartozik valamihez (esetleg csak időlegesen), de önállóan is létező entitás. A binfában a gyökér lehet aggregációban vagy kompozícióban a fával attól függően hogy a stacken vagy a heapen tároljuk az objektumát. Ezt a Helló, Welch fejezet Tag a gyükér és Mutató a gyökér feladataiban részletesen kidolgoztuk. Aggreáció esetén üres rombusz van a vonal végén, kompozíciónál pedig tömöt rombusz. Mivel a gyökér egy objektum nem külön osztály és nem két osztály közt van a kapcsolat így a diagrammon nem látunk sem ilyen fajta kompozicíót sem aggregációt, mivel csak osztályok közt van értelmezve. A forráskódot .h típusó header fájlba kell menteni és egy fehér hátterű jelölésű fájlba, amilyet találunk a gépen és másolatát felülírjuk a binfa forráskódjával és bemáasoljuk egy általunk megtalálható mappába. Majd a Visual Paradigsm programban a Tools/Code/Reverse C++ code paranccsal, majd kiválasztva a fájl mappáját leokézzuk és a megjelnő Class Repository sávban jobb klikkelve a mappán Reverse "fájlnév" to New Class Diagram opciót választva létrehozzuk az osztálydiagramot a C++ forráskódunkból.  
              A feladat megoldásához Visual Paradigsm Standard programot használtam, melynek a telepítéséhez rendszergazda jogosultság szükséges 1gy a nálam Windowsra letöltött exe fájlra jobbklikkelve futtatás rendszergazdaként opcióval telepíthejük a programot, majd licenszünket generált kód segítségével kezdehtjük meg miután megadjuk az email címünket.
              Sem az  Umbrella, sem az Argo Uml kiegészítók használatával sem múködött mivel nem támogattak néhány binfában használt eszközt.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="uml1.png"></imagedata>
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
                <imagedata fileref="uml2.png"></imagedata>
            </imageobject>
        </mediaobject>
        <mediaobject>
            <imageobject>
                <imagedata fileref="uml3.png"></imagedata>
            </imageobject>
        </mediaobject>
      <mediaobject>
            <imageobject>
                <imagedata fileref="uml5.png"></imagedata>
            </imageobject>
        </mediaobject>
         <mediaobject>
            <imageobject>
                <imagedata fileref="uml7.png"></imagedata>
            </imageobject>
        </mediaobject>
        
        <title>Forward engineering UML osztálydiagram</title>
        <para>
            UML-ben tervezzünk osztályokat és generáljunk belőle forrást!
        </para> 
        <para>
             Először létrehozunk egy új projektet és megnyitjuk azt a New-ra kattintva majd nevet adunk és UML adattípust állítunk be mivel osztálydiagramot hozunk létre, majd az Openüre kattintva megnyitjuk a létrehozott vpp kiterjesztésű projektünket, majd jobb klikkelve a projekt néven Model/New Model majd megjelink Add New Diagram amire klikkelve kikeressük a Class Diagram-omelyet elnevezhetünk létrehozunk egy osztály típúsu diagramot melyben dolgozunk osztályokkal. Class-ra klikkelve majd a fehér lapra klikkelve osztályokat illeszthetünk be majd elnevezzük aztán jobb klikkelve az alakzaton bővíthetjük is azt például attributumokkal. Osztályok közti kapcsolatot az osztály kijelölve majd a jobb felső sarkábs lévő ikonra kattintva hozhatunk létre, ahol megadhatjuk melyik osztályhoz csatlakozzon. A C++ kódot az előző feladathoz hasonlóan a Tools/Code/Generate C++ code-al hozhatjuk létre a kiválasztott mappába, amit kijelölve a Cpp Path és Source Path fülekre klikkelve majd a ...-ra kattintva módosíthatunk. Minden osztályhoz létrehoz egy header .h es egy .cpp kiterjesztésű fájlt, melyeket megtekinthetünk ha jobb klikkelve társítjuk a jegyzettömbbel.          
        
	 A következő feladatban egy programot elemezhetünk mely egy számítógép alkatrészekkel kereskedő cég számára készült, ami fájlból tud olvasni és fájlba írni, illetve képernyőre listázni egyszerű szöveges fájlokból. A program létrehozásakor az is fontos volt hogy könnyen fejleszthető legyen. A megoldást esetünkben egy C++ könyvtár segítségével oldották meg, hiszen így felhasználható anélkül is, hogy kiadnák a forráskódját. Ez a létrehozott keretrendszer képes kezelni elemi, vagy összetett termékeket, egyszerűen úgy, hogy a terméket reprezentáló osztályban van egy termékeket tároló vektor, ami tartalmazza az ő alkatrészeit, amik szintén a termék osztály példányai.
	 </para>
                 <mediaobject>
            <imageobject>
                <imagedata fileref="uml9.png"></imagedata>
            </imageobject>
        </mediaobject>
              <mediaobject>
            <imageobject>
                <imagedata fileref="uml10.png"></imagedata>
            </imageobject>
        </mediaobject>

     <title>Egy esettan</title>
        <para>
            A BMEs C++ tankönyv 14. fejezetét (427 444 elmélet, 445 469 az e settan) dolgozzuk fel!    
        </para>  
        <para>
            A 13. fejezetben az UML-lel (Unified Modeling Language - egységes modellezőnyelv) kapcsolatos információkat olvashatunk. Az osztálydiagram lesz ismertetve, amiről az előző feladatokban írtam, így kiegészítem a könyvbeli anyaggal. Az osztályt téglalap jelöli, aminek a létrehozásához elég csak a nevét megadni, a multiplicitás tömbök esetén a tartalmazott elemek számának halmazát adja meg, amennyiben az attributum tömb. A multiplicitás nem más, mint egy olyan intervallum, ami szövegként jeleníthető meg, és egy egész szám vagy egy egészekből áll. Az intervallum szintaxisa: alsó_határ..felső_határ. Az egyfajta kapcsolatot üresháromszög nyillal jelöljük. Az irány lehet in, out vagy inout. Alapértelmezetten in lesz, C++-ban ez érték szerinti paraméterátadást jelent, az out és az inout-nál pedig referenciát vagy pointert (ritkán) adunk át. Az osztálysablonok sablonparamétereit  az osztály jobb felsős sarkában elhelyezett, szaggatott keretes téglalapban soroljuk fel.  Az alapértelmezett értéket C++-ban a konstruktor inicializálási listájában adjuk meg. Az UML (Unified Modeling Language) szabvány szerint kapcsos zárójelben megadhatunk további tulajdonságokat is. A konstans attribútumokat readOnly tulajdonság jellemzi, a statikus attribútumokat pedig aláhúzás jelöli. Az osztálysablonoknál a sablonparaméter jelölését, illetve a sablonparaméter és a hozzárendelt konkrét példányosítás összerendelést kell modelleznünk. A sablonparamétereket az osztály jobb felső sarkában jelöljük, szaggatott vonalú téglalapban.         
        </para>
  <figure>
            <title>Termékek létrehozásáért felelős osztályok kapcsolata.</title>
            <mediaobject>
                <imageobject>
                <imagedata fileref="img/esettan-uml.png" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>
<figure>
            <title>Az programunk output-ja.</title>
            <mediaobject>
                <imageobject>
                <imagedata fileref="img/esettan.png" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>
<figure>
            <title>computerproducts_out.txt file-ba való exportálás.</title>
            <mediaobject>
                <imageobject>
                <imagedata fileref="img/product.png" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>

        </para>
          <title>BPMN</title>
        <para>
            Rajzoljunk le egy tevékenységet BPMN-ben! https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_7.pdf (34 47 fólia)
        </para>    
        <para>
            A BPMN az UML aktivitás diagramjához hasonló grafikus modellező nyelv, melyet például a yEd Graph Editor program segítségével használhatunk. Ezt a https://www.yworks.com/products/yed/download#download linkről töltöttem le, majd telepítettem. A program futtatása után New Document-re kattintunk, ezzel létrehozunk egy új dokumentumot. A program jobb oldalán a Palette mezőben lenyitjuk a BPMN fület majd a kiválasztott alakzatra kattintva majd azt behúzva a fehér lapra készíthetünk diagrammokat, az elemeket a kezdőelemre kattintva majd a célelemre húzva kapcsolhatjuk össsze az elemeket. Az elemeken jobb klikkelve majd az Add Label-re kattintva feliratokat adhatunk hozzá az egyes elemekhez.
            A példában a hazaérkezésem szimuláltam fizetős vagy ingyenes eszköz használatával. A zöld karika a tevékenység kezdetét jelenti, a piros a végét. A téglalap feladatot definiál, a rombusz pedig vagyos választásos kifejezést.
        </para>
                   <mediaobject>
            <imageobject>
                <imagedata fileref="uml11.png"></imagedata>
            </imageobject>
        </mediaobject>
	
    <section>
        <title>BPEL Helló, Világ! egy visszhang folyamat</title>
        <para>
		Egy visszhang folyamat megvalósítása az alábbi teljes videó tutoriál ” alapján: https://youtu.be/0OnlYWX2v_I
	</para>	
	<para>
		A feladat megoldásához először le kell töltenünk az alábbi linkekről néhány dolgot:
			https://www.eclipse.org/downloads/packages/release/kepler/sr2/eclipse-ide-java-ee-developers
			https://tomcat.apache.org/download-90.cgi
			www.apache.org/dyn/closer.cgi/ode/apache-ode-war-1.3.8.zip
	 	ezzel feltelepítjük a BPEL Designer pluginokat Eclipsbe és konfigurációkat az Apache Tomcat 8.5, Java JDK 9, Apache ODE, Eclipse Oxygen-nel.
		Majd telep1tsük fel az Eclipse exe telep1tőjével azon belül a Eclipse IDE for Java Developers csomagot, majd kattintsunk a Launch gombra, az alapértelmezett munkaállománnyal indítsuk el a programot. Majd az üdvözlőlap kiixelése után kattintsunk a Help/Install New Software menüpontra. Majd a work with fülnél kiválasztjuk az Oxygen csomagot, majd a találatok közül az SOA Development-ből a BPEL Commons, BPEL Runtime Adapter, BPEL Visual Designer kiegészítőket telepítjük elfogadva a licenszet, ezzel újraindul az Eclipse.                                                                                        
		Az Apache-ode-war mappából az ode.war fájlt másoljuk át az Apache-tomcat/webapps mappába, így az Apache-ode-war mappára már nem s lesz szükségünk. Majd egy parancssort nyitva a cd paranccsal belépünk az Apache-tomcat/bin mappába, ahol a chod a+x catalina.sh paranccsal írási jogot adunk a catalina.sh fájlra minden felhasználó számára. Majd ./catalina.sh run paranccsal futtatjuk a fájlt, ezzel elindul a tomcat szerver.                       
	   	Majd miután újraindult az Eclapse az alsó részen ráklikkelünk a Servers fülre, majd ráklikkelünk a kék aláhúzott linkre ami azt írja jelenleg nincs elérhető szerver, kattintsunk rá a létrehozáshoz. Ráklikkelünk majd az Apache-n belül az Ode v1.xServer típúsu-t szervert válasszuk ki. Majd az ODE és a TOMCAT home könyvtárának beállítjuk a Apache-tomcat/webapps/ode mappa elérését, melyet ha megtaláltunk a cd paranccsal akkor a pwd paranccsal kiirathatjuk az elérérsét a home könytvártól, amit ugye felhasználunk a TOMCAT és ODE home könyvtárának. 
		Majd a létrehozott szerveren való beállítások eléréséhez ráklikkelünk a létrehozott szerverre a Servers fül alatt ugye, majd az Open Launch Configuration-re, majd az Arguments füére klikkelve a VM Arguments részből kitöröljük a -Djava.endorsed.dirs.../endorsed" részt. Majd a Classpath fülre kattintva a User entriesüt kijelölve kattintunk a Add Extrenal JARs-ra, ahol a Downloads fülre kattintva az Apach-tomcat/bin/tomcat-juli.rar fájlt megnyitjuk, így hozzáadtuk a User Entries-hez. Ezzel a szerverünk működik az Eclipse-ben is, jobb egérgombbal kattintva a Servers fül alatt a szerverünkre majd a Start gombbal elindíthatjuk és a Stop gombbal megállíthatjuk.
		Majd az Eclipse File/New/Other/BPEL/BPEL Project fülére kattintva megnyitjuk a projekt varázslót, ahol nevet adunk a projektünknek, például HelloWorld és a Target runtime fülnél kiválasztjuk a szerverünket, majd megadjuk a tartalom mappa nevét is, például bpelContent. Ezzel létrehozzuk a HelloWorld nevű projektünket, amin még kell beállításokat végeznünk.
		Majd lenyitjuk a HelloWorld projekt fülét és jobb klikkelünk a bpelContent-re majd New/Other-re ahol BPEL Process File-t választjuk ki majd megadjuk a Process nénvek a HelloWorld nevet például és a Namespace-ban a http://helloworld.localhost, majd a következőre klikkelünk, ahol a Sablon fülnél az egyidejű BPEL process-et választjuk, illetve a Service address-t http://localhost:8080/ode/process/HelloWorld azonosítót adjuk. Ezzel megkapjuk az ábrát a workspace felületen.
		Majd a FIX_ME-Add_Business_Logic_Here-t kijelöljük és alul a Properties fülre klikkelünk, majd a Description-on belül a Name mezőt átírjuk Assign-ra. Majd a Details fülre kattintva a 4-es számra klikkelve a New-ra kattintunk majd a From rész input/payload/input:string és a To rész output/payload/result:string mezőket kijelölve a munkafelületre kattintva generáljuk a változókat.
		Majd a HelloWorldArtifacts.wsdl fájlt megnyitva a Properties/General/Address mezőt átírjuk http://localhost:8080/ode//process/HelloWorld-re. Majd rákattintunk a nyilak közti négyzetre és a Generate Binding Connect-re klikkelve létrehozzuk a kapcsolatot. 
		Majd a bpelContent/new/other/BPEL/BPEL Developement Descriptor-t hozunk létre. Miután létrehoztuk a munkaablakban beállítjuk az Associated Port mező értékét HelloWorldPort-ra.
		Majd a szerverünkre a Servers fül alatt jobb klikkelünk és Add and Remove-ra kattintunk, ahol a HelloWorld-öt kijelölve Add-ra kattintva hozzáadjuk a szerverhez. Majd jobb klikkelve Start gombra nyomva elindítjuk a szervert és a HelloWorldArtifacts.wsdl-en jobb klikkelve majd Web Services/Test with Web Services Explorer-re kattintunk, majd a munkablakban a Name/process-re kattintva megkapjuk az input mezőt, ahova beírunk random szöveget majd a Go!-ra kattintva megkapjuk a result-ba ugyanazt, tehát működik a szerver.                                                       
	    </para>
	                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="BPEL.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
	</section>
	
          <title>TeX UML</title>
        <para>
            Valamilyen TeX-es csomag felhasználásával készíts szép diagramokat az OOCWC projektről ( pl. use case és class diagramokat).
        </para>   
        <para>
           Az UML diagramok rajzolására általam választott TeX csomag a TikZ. Ez lehetővé teszi számunkra, hogy emberileg átlátható, de pontos, szöveges formában adjuk meg diagramunk konkrétumait. A TeX kezelő szoftver amit alkalmaztam a TeXWorks, ami kényelmesebbé teszi a dokumentumszerkesztést, és ha megadunk egy csomagot, hogy használjuk, automatikusan kikeresi és installálja, tehát a TikZ-et is. A modellezés során az OOCWC projekt külső könyvtárait nem használtuk fel, illetve a TeX csomag szintaktikáját is figyelembe kellett vennünk. Használatához szükség van a <filename>texlive-pictures</filename> csomagra és a <filename>tikz-uml.sty</filename> fájlra, amit a TikZ-UML oldaláról tudsz letölteni. A program alapszerkezete:
        </para>
     <programlisting><![CDATA[
\documentclass{article}
\usepackage{tikz}
\usepackage{tikz-uml}
\begin{document}
\begin{tikzpicture} 
\begin{umlpackage}[x=0, y=0]{justine}
\begin{umlpackage}[x=0, y=0]{robocar}
\end{umlpackage}
\begin{umlpackage}[x=10, y=0]{sampleclient}
\end{umlpackage}
\end{umlpackage} 
\end{tikzpicture}
\end{document}
            ]]></programlisting>
        <para>
             Az osztályokat a <function>\umlclass</function> segítségével tudjuk létrehozni. Szintaxisa a következő:
        </para>
            <programlisting><![CDATA[
                \umlclass{<név>}{<tagváltozók>}{<metódusok>}
            ]]></programlisting>
    <para>
            Az egyes tagváltozókat és függvényeket a "\\" karakterekkel választjuk el. Ahogy már megtanultuk a korábbi fejezetekbe, "+"-al jelöljük a publikus tagokat és "-"-al a privátokat. Az osztály teljes implementációja a következő.
    </para>
            <programlisting><![CDATA[
\begin{umlpackage}[x=0, y=0]{robocar}
\umlclass{justine::robocar::CarLexer}{
	- name : char[128] \\
	- role : char \\
	- route : std::vector<unsigned int>}{
	+ yylex() : int \\
	+ operator <<(os : std::ostream&, cl:CarLexer&) : std::ostream& <<friend>> \\
	+ get\_name() : char* \\
	+ get\_role() : char \\
	+ get\_num() :int \\
	+ get\_errnumber() : int \\
	+ get\_guided() : bool \\
	+ get\_cmd() : int \\
	+ get\_id() : int \\
	+ get\_route : std::vector<unigned int>& \\ + get\_from() : unsigned int \\
	+ get\_to() : unsigned int \\
	- m\_cmd() : int \\
	- num () : int \\
	- m\_errnumber() : int \\
	- m\_guided() : bool \\
	- m\_id() : int \\
	- from() : unsigned int \\
	- to() : unsigned int
	}
\end{umlpackage}
            ]]></programlisting>
     <mediaobject>
            <imageobject>
                <imagedata fileref=".png"></imagedata>
            </imageobject>
        </mediaobject>
	</section>
</chapter>
