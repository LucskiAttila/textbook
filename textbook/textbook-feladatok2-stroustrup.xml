<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Stroustrup!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>JDK osztályok</title>
     <para>
          Írjunk olyan Boost C++ programot (indulj ki például a fénykardból) amely kilistázza a JDK összes osztályát (miután kicsomagoltuk az src.zip állományt, arra ráengedve)!
     </para>
     <para>
          A feladat megoldásához először is telepíteni kell a JDK osztályokat a gépünkre. A JDK állományok benne vannak például az openjdk-13 csomagban, amit letöltehetünk akár a java.net weboldalról a wget parancssori kifejezés használatával, melyet szükség esetén telepíthetünk a sudo apt-get install parancs segítségével a parancsossorban. Miután letöltöttük az állományt láthatjuk hogy tar kiterjesztése van. tehát egy tömörített fájl melyet a tar parancssori kifejezéssel kicsomagolhatunk a megfelelő kapcsolók használatával. Az xzvf kapcsolót használtam, melyben az x és z a lényegesebbek hogy kicsomagoljon és a gzip segítségégvel, a v kapcsolóval a folyamat végrehajtódását követhetjük nyomon a terminálban, az f kapcsolóval pedig engedélyezzük a névadást a létrejövő fájlnak, ami alapértelmezetten, ahogy csináltam megegyezik a tömörített fájl nevével. De ez nem fontos mivel mi az src.zip fájllal fogunk dolgozni, ami mivel zip kiterjesztésű így ez is egy tömtörített fájl csak más programot használunk a kicsomagolásához, ahogy a tömörítéshez is használtak. Az unzip csomagot hasznáéjuk a kitömörítéshez, de előtte a könyebb elérés érdekében, amit ugye az általunk írt program szükséges, a move kifejezéssel a jdk-s könyvtárból az általunk létrehozott gyökérkönyvtárba, amit ehhez a feladathoz hoztunk létre, ahova letöltöttük a fájlt és amibe dolgozunk áthelyeztem az src.zip fájlt. Ebbe a mappába a parancssorban eljuthatunk a cd parancsokkal, de egyszerűbb jobb klikkel a Megnyitás parancssorban utasítást használni. Az áthelyezéskor . karakter jelentése az aktuális könyvtár, azaz az általunk létrehozott gyökérkönyvtár. Illetve a helyes működéshez a már nem szükséges fájlokat törölhetjük az src parancssori kifejezés segítségével, az r és v kapcsolót használtam mivel a mappát almappáival együtt törlöm és láthatjuk hogy halad a folyamat, ehhez telepítenünk kell a secure-delete csomagot az apt install segítségével: 
          tar https://download.java.net/java/GA/jdk13/5b8a42f3905b406298b72d750b6919f6/33/GPL/openjdk-13_linux-x64_bin.tar.gz
          mv jdk-13/lib/src.zip .
          unzip src.zip
          apt get install secure-delete
          srm -rv jdk-13 src.zip openjdk-13_linux-x64_bin.tar.gz
          A feladat alapján boost C++ programot kell írnunk, ehhez azonban telepíteni kell a boost könyvtárakat, amiket tartalmaz például a libboost-all-dev csomag, amit a már általunk ismert apt-get install parancsori kifejezéssel tehetjük meg az alábbi módon:
          sudo apt-get install libboost-all-dev
          A programunkat a g++ fordítóval fordítjuk használva az alaábbi kapcsolókat:
          g++ program.cpp -o bejaro -lboost_system -lboost_filesystem -lboost_program_options -o p
          A program futtatása az általunk elnevezett névvel történik amit a fordításkor adtunk meg az o kapcsolóval , majd második paraméterként meg kell adnunk a /home könytvártól a létrehozott mappánk elérési útvobalát az alábbi módon:
          ./p /home/attila/Letöltések/jdk
          Ezt a programunk elején hibakezeltem is egy parancssori argumentumainak számának ellenőrző feltétellel. Ha teljesül akkor kapunk egy hibaüzenetet a program használatáról, ha nem akkor példányozzuk az src mappa könyvtárrendszerét, melyre meghívjuk az általunk megírt read_files függvényt ami végigmegy a könyvtárszerkezet mappáin és a return_vec nevű vektorba menti a java kiterjesztésű fájlokat melynek értékét értékül adjuk a paths vektornak. Így az src mappának a java kiterjesztésű fájlainak neveit tartalmazza a paths vektor, melynek elemein az auto &path :paths kifejezés segítségével, majd a fájlok tartalmainak eléréséhez használjuk az ifstream kifejezést, illetve a getline függvénnyel az adott fájl sorain megyünk végig egy végtelen ciklussal, amíg nem találjuk meg a fájl nevét egy class kifejezés mögött. Ha megtaláltuk a keresett sztringet az adott fájl valamely sorában akkor kiiratjuk a szabványos kimenetre a fájl elérési útvonalát zárójelben, illetve a zárójel előtt az adott JDK osztály nevét és növeljük az n változó értékét eggyel,  mivel megszámoljuk a JDK osztályainak számát. A keresést az if(l.find(findstr) != std::string::npos) kifejezéssel végeztük ami akkor lesz igaz ha a find paramétreként megadott objektum legalább egyszer szerepel a find által meghívott objektumban.  A break kifejezéssel tudunk kilépni a végtelen while ciklusból ha megtaláltuk a keresett kifejezést. A c_str függvényt akkor használjuk, ha egy adott objektumra egy C függvényt hívunk meg, ami C típusó sztringet vár paraméterül, így meghívjuk rá a c_str függvényt a helyes működés érdekében. A stem függvény segítségével kapjuk meg a JDK osztályok neveit a fájnevükből, melyek java kiterjesztésűek és tartalmazzák a fájlenevet főosztályként.
      </para>
      <programlisting language = "C++"><![CDATA[
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <boost/filesystem.hpp>
#include <boost/filesystem/fstream.hpp>

std::vector<boost::filesystem::path> return_vec;
std::vector<boost::filesystem::path>
read_files(const boost::filesystem::path path) {
    if (is_regular_file(path)) {
        std::string ext(".java");
        if ( ! ext.compare(boost::filesystem::extension(path))) {
            return_vec.push_back(path);
        }
    } else if (is_directory(path)) {
        for (boost::filesystem::directory_entry & entry
                :
                boost::filesystem::directory_iterator(path)) {
            read_files(entry.path());
        }
    }
    return return_vec;
}
int
main(int argc, char **argv) {
    if(argc!=2){
    std::cout << "Usage: ./<filename> <path>" << std:endl;
    return -1;
    }
    else{
    boost::filesystem::path sources_path { argv[1] };
    std::vector<boost::filesystem::path> paths = read_files(sources_path);
    std::string l;
    int n = 0;
    for (auto const &path : paths) {
        std::ifstream in(path.c_str());
        if (in) {
            while (std::getline(in, l)) {
                std::string find_str = "class " + path.stem().string();
                if (l.find(find_str) != std::string::npos) {
                    std::cout
                        << path.stem().c_str()
                        << " (file: " << path << ")"
                        << std::endl;
                    n++;
                    break;
                }
            }
        }
    }
    std::cout
        << "There are "
        << n
        << " classes in JDK (sources dir: " << sources_path << ")."
        << std::endl;
    return 0;
}
}
           ]]>
        </programlisting>
      	   <mediaobject>
            <imageobject>
                <imagedata fileref="jdk1.png"></imagedata>
            </imageobject>
        </mediaobject>
	    	   <mediaobject>
            <imageobject>
                <imagedata fileref="jdk.png"></imagedata>
            </imageobject>
        </mediaobject>
     </section>
    
    <section>
	     <title>Másoló-mozgató szemantika</title>
	     <para>
              Kódcsipeteken (copy és move ctor és assign) keresztül vesd össze a C++11 másoló és a mozgató szemantikáját, a mozgató konstruktort alapozd a mozgató értékadásra! 
        </para>    
        <para>
             A konstruktorok segítségével példányosítjuk az osztályokat, kezdőértéket adunk nekik ezzel létrehozzuk az objektumokat. A konstruktor nevének meg kell egyeznie annak az osztálynak a nevével amelyikre meghívtuk, a létrehozott objektumok által lefoglalt tárterületet a destruktorok segítségével szabadítjuk fel, melynek a neve megeyezik az osztályéval és ~ jel van előtte. 
	     Ha a konstruktorok paraméterének objektumokat adunk meg akkor meghívódik a másoló konstruktor, ami létrehozza létrehoz egy új objektumot a paraméterként megadott azonos osztálybeli objektum értékéivel: 
		osztály(const osztály& paraméter){
		size_t size = strlen(paraméter.adat);
		data = new char[size-1];
		memcpy(adat, paraméter.adat, size);
		}
	     Ez a kódcsipet hívódik meg ha egy osztály típusú objektumot próbálunk létrehozni egy másik osztály típusú objektum segítségével, annak értékeievel. A konstruktort úgy definiáltuk hogy megnézi a másolandó objektum változójának méretét, majd lefoglal annyi méretet az aktuális objektum ugyanazon nevű változójába, majd a memcpy függvénnyel átmásoljuk a paraméter objektum adott heap memória tartalmát amit a változó névvel azonosítunk a hozzátartozó aktuális objektumba. A new kifejezéssel heapen lefoglalt memóriát a delte függvénnyel nekünk kellessz törölni, jelen esetben delete data[] mivel memóriatömbről van szó.
	     A másoló értékadás akkor hívódik meg ha két már létező azonos osztálybeli objektum közt egyenlőség jel van, ekkor nyilván a baloldali objektumnak akarjuk értékül adni a jobb oldali objektumot. Ehhez túlterheltük az egyenlőségjel operátort:
		osztály& operator=osztály(const osztály& paraméter){
		size_t size = strlen(const paraméter.adat);
		data = new char[size-1];
		memcpy(adat, paraméter.adat, size);
		return *this
		}
	     Itt is hasonló művelet hajtódik végre mint a másoló konstruktornál, de ennek a konstruktornak lesz visszatérési értéke mégpedig a dereferenciált this kifejezés, ami az aktuális objektum memóriacíme, *-gal viszont maga az objektum.
	     Amint láthatjuk mindkét esetben megmaradt az eredeti objektum heapen foglalt területe és emellé hoztunk létre egy újat ugyanazon értékekekkel. Azonban ha nincs szükségünk már az eredeti objektumunk egyes részeire és ezeket egy másik hasonló osztálybeli objektumban akarjuk tovább használni akkor hasznos a C++11 által bevezetett mozgató szemantikák, azaz a mozgató konstruktor és mozgató értékadás. Ezek akkor hívódnak meg ha a konstruktor objektuma jobbérték típusú kell hogy legyen, mivel ha alapértelmezettként balérték típusú akkor a másolószemntika hívódna meg. Ezek definiálásakor &&-et használunk referenciának:
		osztály (osztály&& paraméter ){
		adat = paraméter.adat;
		paraméter.adat = nullptr;
		}
	     Amint láthatjuk a mozgató konstruktor esetén, ami akkor hívódik meg ha létrehakarunk hozni jobbérték objektumból vele azonos osztálybeli objektumot, az átmozgatni kívánt változó memóriacímét értékül adtuk az aktuális objektuméhoz tartozó változónak, majd az eredeti objektuménak nullptr értéket adtunk, így töröltük. Mivel törlés nélkül probléma lett volna a memóriafelszabadításkor is mivel két változó is ugyanarra a memóriacímre mutatott és C++ ezeket nekünk kell törölni és a duplatörlés memóriaszivárágst eredményezhet. Egyébként Java nyelvben az objektumoknak csak a nevét kell módosítani, azaz több objektum használhatja ugyanazt a memóriacímet így ha módosul az egyik, vele módosul a másik, azonban itt a memóriafelszabadítás automatikusan végződik a garbage collapter segítségével.
	     A mozgató értékadás akkor hívódik meg ha egynelőség jelet használunk két azonos típósó objektum között, melynek jobb oldalán jobbértékű, baloldalán balértékű objektum szerepel:
		osztály& operator=osztály(const osztály&& paraméter){
		swap(adat,paraméter.adat);
		return *this;
		}
	     Ez is hasonló szemantikájú a másoló konstruktorhoz annyiban hogy az egyenlőség jel operátort terheljük túl benne, azaz átdefiniáljuk a működését az alapértelmezettől eltérő módon. Itt a swap függvény segítségével felcseréljük az átadni kívánt változók értékeit, így egymás már egymás memóriacímeire fognak mutatni, itt az adat alapértelmezettként nullptr.	
	     A feladat alapján a mozgató konstruktorunkat alapoznunk kell a mozgató értékadásra:
		osztály (osztály&& paraméter ){
		adat = nullptr;
		*this = move(paraméter);
		}
		osztály& operator=osztály(const osztály&& paraméter){
		swap(adat, paraméter.adat);
		return *this
		}
	      Ez ugye akkor hívódik meg amikor a mozgató konstruktorba ágyazzuk a mozgató értékadást és hasonlóképpen működik a mozgató konstruktorhoz. Először is nullptr értéket adjuk az aktuális objektum adat változójának, aminek az értékét ugye felakarjuk cserélni a paraméterként adott objektuméval, ehhez segítségül hívjuk a mozgató értékadást amiben ugyanis értelmezett a swap függvény. Ahhoz hogy meghívjuk a move függvénnyel jobbértékűre kell állítanunk a paraméter objektum típusát baloldaliról, így egyenlővé téve az aktuális objektumunkkal. Ezzel teljesül a feltétetele a mozgató értékadásnak és meg is hívódik, ami azt eredményezi hogy a mozgató értékadás által megfelően módosított objektumot értékül adjuk a mozgató konstruktor aktuális objektumának. 
	    </para>
	</section>
	
    <section>
	     <title>Hibásan implementált RSA törése</title>
	     <para>
		  Készítsünk betű gyakoriság alapú törést egy hibásan implementált RSA kódoló: https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_3.pdf (71 73 fólia) által készített titkos szövegen.
	    </para>
	<para>
	    Az RSA egy kódolási módszer melyet 1976-ban implementáltak és amit a mai napig használnak. Használatához az USA-ban egészen 2000-ig díjat kellett fizetni. Az eljárás a maradékos osztásra alapszik, melynek során először választanunk kell nagy prímszámot, melyeket nevezzünk p és q-nak. Majd számoljuk ki N-et a p és q szorzatából, ez lesz a modulusa a két kulcsnak. Majd számoljuk ki f(N)=(p-1)*(q-1) értékét, ezek alapján meghatározzuk e értékét úgy hogy 1<e<f(N), illetve e és f(N) legnagyobb közös osztója 1, azaz relatív prímek. Ennek az e egész számnak a segítségével kódoljuk a szöveget az alábbi módon: c= m^e mod N, ahol m a kódolandó szöveg, mely ha betűkből áll először át kell konvertálnunk számmá. Az e értéke nyilvános kell hogy legyen gyakran használják egységésen a 65537-et, illetve az N értéke a kommunikáció tagjainak eltérő kell hogy legyen, ezek segítségével tudnak küldeni egy tagnak üzenetet, aki a saját d értékével megfejtheti. A d értékét a d*e=k*f(N)+1 egeyenlet segítségével határozzuk meg, ahol k pozitív egész. Így a d és N ismeretében visszakaphatjuk az eredeti szöveget, azaz m-et az alábbi módon m=c^d mod N.
	    Az RSA asszimetrikus kódolás mivel két kulcsa van, de a feladat megoldásához elég a nyilvános kulcsot meghaatroznunk, azaz az N értékét ha az e-t 65537-tel használjuk. Ez azért elegnedő mivel a kódolt üzenetet a hibás kódolás miatt feltörhetjük. A hibásan kódolás alatt azt értjük, hogy betünként kell lekódolnunk a szöveget, nem az egészet egybe, emiatt válik feltörhetővé a szöveg, mivel kódolásnál betűnként azonos szimbólumokat rendeltünk az egyes karakterekhez, így egy gyakorisági vizsgálatot elvégezve visszakaphatjuk az eredeti szöveget a titkos kulcs, azaz a d értékének ismerete nélkül. Ehhez szüskégünk lesz egy betű gyakorisági táblázatra lehetőleg az adott nyelvhez, ezt az alábbi linkről hasnzáltam fel: https://bs-gerillanyelveszet.blog.hu/2012/08/18/a_jellegzetesen_magyar_betuk_betukapcsolatok_es_hangjelolesek_vizsgalata.
	    A program elején static kulcsszóval definiáljuk a program során használt változókat, függvényeket, tömböket, ezek a program működéséig a memóriában lesznek. A freq függvény visszadja a már beolvasott betűgyakorisági táblázat leggyakoribb betűjét, majd ha találtunk leggyakoirbbat akkor töröljük a táblázatból. A leggyakoribb elem meghatározásához egy for ciklussal végigmegyünk a has tábla minden során, majd ha az adott sor értéke nagyobb mint az i változójé, akkor i-nek értékül adjuk az aktuális értéket és elmentjük a hozzátartozó kulcsértékét. Majd a main függvényben létrehozunk két nagy prímszámot, melyeknek meghatározzuk a szorzatát a multiply függvény segítségével és publickey nagy egész számot létrrehozzuk 65537 értékkel. Majd a try blokkban beolvassuk a parancssorban megadott kódolandó szöveget, ehhez ismernünk kell a szöveg szavainak számát, majd ezt for ciklussal menjük egy sztringbe parancssor argumentumonként szókösökkel elválasztva. Majd a megfelelő parancssori argumentumot felhasználva beolvassuk a megadott fájlból a betűgyakorisági táblázatot soronként egy hash táblázatba. Ehhez soronént létrehozunk egy String típusú tömböt, melynek elemeit egy tabulátor választja el, így az első sor betűjét mentjük egy változóba és a számát egésszámmá konvertálva egy másik változóba, majd ezeket a put függvénnyel mentjük egy hash táblába. Ezt a try blookot hibakezeljük a catch függvényben leírt módon, ha rossz parancssori argumentumokat adnánk meg. Majd a beolvasott szöveg betűit kisbetűkre állítjuk, majd byte típusú tömb segítségével kódoljuk a beolvasott szöveget kivéve a szóköz és pont karaktereket, vesszőt, pontosvesszőt, gondolatjelet, számokat jelen esetben. A többi betűkre végrehajtjuk az RSA kódolást, azaz vesszük a modulus-adik modolusát a publicKey értéknek. Majd kiirajtjuk az eredeti és kódolt sztringeket, majd a frequency hasmapba mentjük a beolvasott már kódolt szöveg egyes karaktereinek gyakoriságát úgy hogy mentjük az adott karakterhelyen szerplő karaktert egy értékkel, majd ha újra az fordul elő akkor növeljük az értékét eggyel a put, get, contains függvények segítségével. Majd a kódolt szöveg leggyakoribb betűjét kicseréljük a beolvasott táblázat leggyakoribb betűjével így megfelelő táblázat esetén visszakaphatjuk az eredeti szöveget, az egyes cserék után töröljük a mindkét tábla használt karakterének sorát. A freq függvényben új változót használtunk mivel anélkül végtelen ciklust kapnánk, mert módosítaná a while ciklust változóját is így mindkét cserélendő karakter egy betű lenne majd nulla, ezek viszont nem szerepelnek a kódolt szövegben.
	    Amint láthatjuk lekódolhatja az RSA számra, vagy akármilyen karakterre például "-ra is a szöveget, így a gyakorisági táblázatban szerepelni kell a magyar szövegkörnyezetben használt összes karaktereknek a hatékonyabb törés érdekében. 
	    A parancssoban megadhatjuk hogy a kódolandó szöveget fájlból akarjuk e beolvasni vagy parancssorból, célszerű többféle gyakorisági táblázatot is használni.
	    </para>
		<programlisting language="java"><![CDATA[
import java.io.BufferedReader;
import java.io.FileReader;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.HashMap;
import java.util.Map.Entry;

public class rsa {
	static int i;
	static char c;
	static HashMap<Character, Integer> charRank  = new HashMap<Character, Integer>();
	static String str = new String();
	static char freq(){
		char v = 0;
		i = 0;
		for(Entry<Character, Integer> e : charRank.entrySet()) {
			if (e.getValue() > i) {
				i = e.getValue();
				v = e.getKey();
			}
		}
		if (charRank.containsKey(v))
			charRank.remove(v);
		return v;
		}
	public static void main(String[] args) {
		i = 2100;
		
		SecureRandom random = new SecureRandom();
		
		BigInteger p = BigInteger.probablePrime(i/2, random);
		BigInteger q = BigInteger.probablePrime(i/2, random);
		
		BigInteger publicKey = new BigInteger("65537");
		BigInteger modulus = p.multiply(q);
		void usage(){
		System.out.println("Usage: java rsa táblázatelérésiútvonala 0/1 fájlnév/szöveg\n" + "ahol a betűgyakorisági-táblázat formája:\nbetű1\tgyakoriság1\nbetűn\tgyakoriságn\n" + "és 0 fájlból beolvasott szöveg/n" + "1 parancssorba beírt szöveg/n");
		}
		try {		
		if(args[1] == 1){
  		for(i = 2; i < argc; i++)
		str = str + ' ' + args[i];
		}
		if(args[1] == 0){
		FileReader fr = new FileReader(args[0]); 
    		while ((i=fr.read()) != -1)
 		str = (string) i + str;
		}
		else
		usage();
		BufferedReader reader = new BufferedReader(new FileReader(args[0]));
			String line;
			while((line = reader.readLine()) != null) {
				String[] arg = line.split("\t");
				c = arg[0].charAt(0);
				i = Integer.parseInt(arg[1]);
				charRank.put(c, i);
			}
		}catch (Exception e) {
			System.out.println(usage() + "Error-> " + e.getMessage());
		}
		
		str = str.toLowerCase();
		byte[] out = new byte[str.length()];
		for (i = 0; i < str.length(); i++) {
			c = str.charAt(i);
			if (c == ' ')
				out[i] = (byte)c;
			else
				out[i] = new BigInteger(new byte[]{(byte)c}).modPow(publicKey, modulus).byteValue();
		}

		System.out.println("Eredeti: " + str);
		String code = new String(out);
		System.out.println("Kódolt:" + code);

		HashMap<Character, Integer> frequency = new HashMap<Character, Integer>();
		for (i = 0; i < code.length(); i++) {
			 c = code.charAt(i);
			if (c != ' ')
				if(frequency.containsKey(c))
					frequency.put(c, frequency.get(c) + 1);
				else
					frequency.put(c, 1);
		}

		while (frequency.size() > 0) {
			i = 0;
			c = 0;
			for (Entry<Character, Integer> e : frequency.entrySet()) {
				if (i < e.getValue()) {
					i = e.getValue();
					c = e.getKey();
				}
			}
			code = code.replace(c, freq());
			frequency.remove(c);			
		}

		System.out.println("Visszafejtett: " + code);
						}
	}
]]>
</programlisting>
	<mediaobject>
		<imageobject>
		<imagedata fileref="rsa6.PNG" format="PNG" scale="65"/>
		</imageobject>
	</mediaobject>	    
	<mediaobject>
		<imageobject>
		<imagedata fileref="rsa4.PNG" format="PNG" scale="65"/>
		</imageobject>
	</mediaobject>
	<mediaobject>
	     <imageobject>
		<imagedata fileref="rsa5.PNG" format="PNG" scale="65"/>
	     </imageobject>
	</mediaobject>		
    </section>    
 
<section>
	     <title>Változó argumentumszámú ctor</title>
	     <para>
		Készítsünk olyan példát, amely egy képet tesz az alábbi projekt Perceptron osztályának bemenetére és a Perceptron ne egy értéket, hanem egy ugyanakkora méretű képet ” adjon vissza. (Lásd még a 4 hét/Perceptron osztály feladatot is.)	    
	</para>
	<para>
		A Perceptron osztály konstruktora változó argumentumszámú konstruktor melynek működését már korábbi Perceptronos feladatban leírtam, röviden annyit jelent hogy akárhány értékszámú konstruktorral használhatjuk az osztályt csak az első elem mindig a rajta kívüli elemek számát jelenti. Ennek elemszáma adja meg a neurális háló rétegeinek számát, eddigi feladatainkban egyrétegűt használtunk ugye bemeneti és kimeneti réteggel. A jelen feladatban az előző feladathoz képest módosításokat kell végeznünk, mivel most nem egy számot akarunk kapni, hanem egy ugyanakkorra méretű képet.
		Először is módosítanunk kell az mlp.hpp header fájl operátor túlterhelő függvényét, mivel ezzel végezzük a számításokat és határozzuk meg a végeredményt, ami most nem egy szám, hanem egy tömb lesz. Így mödosítanunk kell a visszatérési értéket double* -ra mivel így a visszatérési érték egy double típúsu tömb memóriacíme lesz. Illetve a paraméterül kapott double típúsu image tömbbe mentjük a kiszámolt értékeket, mivel ugyanannyi elemű lesz a bemenet mint a kimenet, hogy azonos képet kapjunk. 
		<programlisting language="C++"><![CDATA[		
		 double* operator() ( double image [] )
                 {
		...
		for(int i = 0; i < n_units[n_layers - 1]; i++)
      		image[i] = units[n_layers - 1][i];
    		return image;
  		}
]]>
</programlisting>
		Majd a main.cpp programot is módosítanunk kell, hogy a Perceptron osztály konstruktorának a kimeneti rétegének értéke ugye size legyen, azaz képmértetnyi. Majd a kiszámolt értéket tároló value változó típusát módosítanunk kell double*-ra mivel az mlp.hpp-ben a kiszámolt értékeket double* típusú tömbjének címét kapjuk vissza a () operátort használva. Majd két egymásba ágyazott for ciklussal módosítjuk a beolvasott png kép rgb színkódjának a red érétékeit a Perceptron által kiszámítottakra, melyet ugye az eredeti red értékekből számítottunk ki. Majd a write függvényt meghívjuk a beolvasott képre újkép.png paraméterrel, így mentjük a módosított képet újkép.png néven.
		<programlisting language="C++"><![CDATA[
		#include <iostream>
#include "png++/png.hpp"
#include "mlp.hpp"

using namespace png;

int main ( int argc, char *argv[] )
{
	image <rgb_pixel> png_image (argv[1]);

	int size = png_image.get_width() * png_image.get_height();

	Perceptron* p = new Perceptron(3, size, 256, size);
	
	double* image = new double[size];

	for (int i{0}; i < png_image.get_width(); i++)
		for (int j{0}; j < png_image.get_height(); j++){
			image[i * png_image.get_width() + j] = png_image[i][j].red;
			
		}
	double* value = (*p)(image);
	for (int i = 0; i < png_image.get_width(); i++)
		for (int j = 0; j < png_image.get_height(); j++)
			png_image[i][j].red = value[i * png_image.get_width() + j];

	png_image.write("újkép.png");

	delete p;
	delete [] image;
}
]]>
</programlisting>
	</para>	
	<mediaobject>
		<imageobject>
		<imagedata fileref="vált1.PNG" format="PNG" scale="65"/>
		</imageobject>
	</mediaobject>
	<mediaobject>
	     <imageobject>
		<imagedata fileref="vált2.PNG" format="PNG" scale="65"/>
	     </imageobject>
	</mediaobject>	
	<para>
		Amint láthatjuk a red értéket 0 körüli értékekre csökkenthettük, illetve akörül maradhattak fehér és fekete szímkód esetén, mivel az eredeti kép ezekből állt. Valószínüleg a sigmoid függvény exponenciális tagja miatt ami -1 és 1 közti értékeket ad vissza ugye, így a fekete rész fekete marad mivel annak RGB(0,0,0) körül kell lennie, a fehér pedig cyan kékszerű lesz mivel a fehér RGB(255,255,255) red tagja csökkent 0 körülire.
	</para>
	<mediaobject>
		<imageobject>
		<imagedata fileref="vált3.PNG" format="PNG" scale="65"/>
		</imageobject>
	</mediaobject>
</section>
	
<section>
	     <title>Összefoglaló</title>
	     <para>
		Az előző 4 feladat egyikéről írj egy 1 oldalas bemutató esszé szöveget!	
	</para>
	<para>
        A perceptron egy olyan program, melynek célja a kategorizálás, azaz adatok egy adott halmazba helyezése (vagy épp nem helyezése). A neve a latin "perceptio", észlelés szóból, illetve a "-tron" ókori görög szuffixumból ered, mely eszközt jelent. Tehát igazából a perceptron szó szerinti fordítása az "észlelésre használt eszköz", ami elég helytálló a funkciójának leírására is. Ahogy azonban a legtöbb tanuló algoritmus, nem működik hibahatár nélkül, tehát csak egy magabiztossági (valószínűségi) értéket ad, viszont ez potenciálisan egy megfelelően betanított perceptron esetén meglepően magas és kicsi értékek közt oszcilláló lehet.
	Valódi neurális hálózaton alapuló szimulácíó különféle problémák megoldásásra, pl a gépi tanulásban. A neuronok amik egy gráfban helyezkednek el kommunikálnak egymással aktivácíós függvények segítségével. Ezek minimum 3 rétegbe vannak rendezve. A bemeneti réteg a bementet egyéb módosítások nélkül adja tovább a többi résznek. A rejtett rétegben történik meg a tényleges műveletek, olyan feladatok tartoznak hozzá, mint például a kódolás/transzformáció és különféle köztes reprezentációk megalkotása. A kimeneti rétegben találhatóak a kimenetei neuronok/függvény. 
	A neuron feladata az, hogy jeleket továbbítson, tejesszen. A továbbítás feltétele az, hogy valamilyen küszöbértéket elérjünk valamilyen bemenettel. Idegeink is csak akkor jeleznek a megfelelő területnek, ha rajtuk ingerlést vált ki egy tényező, azaz a hatás elér egy küszöböt amire a neuron elkezd "tüzelni". A neurális hálók a fentiek alapján egységekből állnak. Egy adott egységtől egy tőle különböző egységhez tartozó út szolgál terjeszteni egy aktivációt. Minden kapcsolat rendelkezik egy súllyal, ez adja előjelét és erősségét neki. Minden bemeneti egység legelőször ennek összegét számítja ki.
	A Perceptron egy neurális háló ami kétfajta csomópontból tevődik össze, egy bementiből és egy kimenetiből. Ezeket a csomópontokat neuronoknak nevezzük, a bemeneti neuron súlyozott kontakton keresztül csatlakozik a kimenetihez, ez a kapcsolat szimulálja a neuronok közti kapcsolat erősségét.
        A perceptron az input alapján számítja ki a kimeneti értékét, úgy hogy képezi a súlyozott összegét a bemenetnek és kivon abból egy speciális torzítási értéket, és ennek a kapott értéknek nézi az előjelét.
	Az mlp.hpp header fájl működéséról írtam.
	A program nem tartalmaz main fuggvenyt igy hasznalatahoz masik fajlban irt main fuggveny es megfeleloen megadott adatok fuggveny parameterek szuksegesek. A program tartalma a Perceptron osztaly amiben definialunk fuggvenyeket  es valtozokat. Egy objektumnak van private es public resze is. Eloszor a private resz fut le, ehhez nincs kulso hozzaferes. A private reszben letrehozunk egy masolo konstruktort es egy seged konstruktort majd deklaraltunk egy valtozot es 3 pointert. Az egy *-os pointert 1 dimenzios tombokhoz azaz sorokhoz hasznaljuk, a **-os pointert 2 dimenzios tombokhoz azaz matrixokhoz, a ***-os pointert 3 dimenzios tombokhoz hasznaljuk. Ezek a szamitasokhoz szuksegesek. A masolo konstruktorral a masolt objektumnak es maganak kulon memoriat foglal, a seged konstruktor ugyanazt hasznalja, jelen esetben a masolo konstruktoret. Mivel private reszben definialtak igy nem hasznalhatjuk oket mas programba amivel hasznaljuk ezt a kodot. A folosleges ujradefinialas elkerulese erdekeben ami ugye novelne a futasi idot definialtuk a QL_HPP-t, ami ujradefinialas eseten #endif-re lep es az #ifndef-nel ellenorzi volt e mar definialva. A Preceptron szerepel parametizalt osztalykent melynek ertekeit objektum letrehozasakor adjuk meg, parameterei eltero mennyisegu egesz tipsu valtozok lehetnek attol fuggoen hany rejtett neuoront hasznalunk. Mivel hiba-visszaterjeszteses preceptronkent hasznaljuk igy minimum 4 paramtert kell megadnunk. Az elso paramter a retgek szama, a masodik a bemeneti neuronok szama azaz adatok szama, a harmadik paramter a rejtett neuronok szama, az utolso paramter a kimeneti neuronok szamat adja meg. A variadic fuggveny teszi lehetove hogy eltero paramteru legyen a konstruktor. Hasznalatahoz includolni kell a cstdarg.h header filet. A va_list iformaciot tarol a lista aktualis allasarol, nevet kell neki adni amit az va_start, va_arg es va_end hasznal. A va_start inicializalja a variable argument listat a legutolso megadott kontruktor valtozoval, a konstruktor dekralarasnal legalabb egy valtozot inicializalni kell es utanna ... szukseges e fuggveny hasznalatahoz. A va_arg parametereben megadjuk milyen tipusokat inicializalodjanak. A va_end a veget jelzi a variable arguments listanak. Az n_units sor erekei a va_arg altal visszadaott ertekek, azaz majd egy kulso objektum bizonyos paramterei lesznek, merte megeyezik a konstruktor elso paramterevel. Az units matrix 1.-tol a konstruktor elso parametere-1-ig indexu sorainak az oszlopainak double mennyisegeit, helyet foglalunk. A #ifndef neve mar volt definialva, akkor az #else utani resz fut az #endif-ig. Ha pedig meg nem volt definialva akkor az #else-ig lefut, az #else nem. A tartalma az hogy  az  std::uniform_real_distribution kisebbkacsacsor double nagyobbkacsacsor dist ( -1.0, 1.0 ); sor segitsegevel -1.0 es 1.0 kozti szamokat random general double tipsban. Ennek segitsegevel adjuk meg a sulyok kezdoertekeit. A sulyokat es a retegek szamat es az egyes retegek neuronjainak szamat kulso fajlbol is beolvashatjuk. A sigmoid fuggveny az aktivacios fuggveny double ertekekkel szamol, ez a sulyozott ertekek osszegeibol kiszamol egy 0 es 1 koze eso szamot. A () operator tulterhelesevel funktort hozunk letre igy egy Perceptron objektumot tipuskent megadva szamolhatunk az objektum es a funktor paramterenek ertekeivel es a szamolt ertek valtozasok mentodnek es adhatunk visszateresi erteket is. A funtkor paramtere egy 2 dimenzios tomb ami a tomoritendo kep pixel adatait varja parameterul. A pixel adatokat 3d tombkent olvasva irjuk 2 dimenzios tombbe sor vagy oszlopfolytonosan for ciklusok segitsegevel. A pixeladatokat az image 2 dimenzios tomb tartalmazza melynek a mutatoja az image es ezt ertekul adjuk az units[0] 2 dimnzios tomb 0. soranak mutatojanak igy az units[0] az image ertekeit hasznalja szamitaskor. A  #pragma omp parallel for parancsot arra hasznaljuk hogy tobb szalon szamoljon a processzor. Az units 2 dimenzios tomb 1. soratol a layers-1. soraig szamoljuk ki a sulyozott osszegek aktivacios fuggveny ertekeit. A funktor visszateresi erteke a tanitashoz szukseges, ez lesz a tenyleges ertek. A vart erteket a leraning fuggveny masodik paramterenek adjuk meg, amit a y valtozoba ment. A learningbe van agyazva megegy leraning fuggveny amivel meghatarozzuk a megfelelo sulyokat hogy a vart erteket kapjuk. Ehhez hibakkal szamolunk es bovitjuk a tenyleges sulyokat. A hibat a backs 2 dimenzios tomb segitsegevel szamoljuk ki ebbe szamolunk az utanna levo units ertek segitsegevel. Majd a sulyhoz hozzadjuk  a hozzatartozo backs*konstans ertek*kovetkezo units erteket es igy megkapjuk a megfelelo sulyt. Az 1-sigmoid(units)-nal a simoid nelkul 1 lehetne igy kinullaznank a sulyokat, de ujra sigmoid-olva tart az ertek csokken folyamatosan. Negativ ertek eseten a masodik sigmoid az 0.5 lesz utanna egyenletesen no ez az ertek. A neuron hibajat a 2 felekeppen szamoljuk ki, ha kimeneti neuron akkor a vart-tenyleges hibaval szamolnu, egyebkent a megfelelo kiszamolt suly es az units es konstans szoraztot osszeadva. A fuggveny vegen toroljuk a backs tombnek foglalt helyeket a delete fuggveny segitsegevel, amit a new-val foglaltunk. A destruktor jele ~ es neve az osztaly neve torli az objektumot es jelen esetben a foglalt memoriacimeket is, ez a program vegen fut le. A save fuggvennyel kimentethjuk a retegek szamat, az egyes retegek neuronjainak a szamat es a sulyokat.
	</para>	
	
</chapter>	    
