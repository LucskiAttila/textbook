<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Lauda!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Port scan</title>
        <para>
            Mutassunk rá ebben a port szkennelő forrásban a kivételkezelés szerepére! https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok javat/ch01.html#id527287
        </para>
        <para>
            A kivételkezelés segítségével tájékoztassuk a felhasználót arról hogy miért működik hibásan a program. Erre minden programozási nyelv biztosít lehetőséget, mivel írhatunk saját kivlteket is például if szerkezettel hogy 0-val ne osszunk, így mivel kezeltük a kivételt a program akár tovább is működhet leállás nélkül, de előfordulhatnak olyan esetek is hogy a program hibásan működhet tovább hibakezelés nélkül, nem csak leálláskor van szükség hibakezelésre. A nem objektum-orientált programozási nyelvekben mint például a C minden kivételt külön kell kezelnünk, a modernebb obejktum-orientált progrmaozási nyelvekben mint a C++ vagu ugye a Java már egy blokkban kezelhetjük az összes feltételt. Erre szolgál a try{} catch(kivétel deklaráció){} ... finally{}, ahol a try blokkba rakjuk a szöveget ahol a kivételt keressük, a cahtch blokkokba pedig megnevezzük a kivételeket amelyeket keresünk a kódban és leírjuk hogy mit csináljon a program az adott kivétel elkapásakor, akár több kvételt is definálhatunk mivel több catch blokkot használhatunk. Ekkor ugye kivételenként egy catch-et használunk, ahol a kivételek hierarchikusan növekvő sorrendben kell hogy szereplejenek öröklődés szempontjából, mert akkor az általunk használni kívánt alosztályos már nem kapódna el, mert az ősösztálya elkapta. A finally részben megadott utasítások mindenképp lefutnak kivétel találásától függetlenül. A throw kulcsszóval pedig dobhatunk kivételeket, amelyek Java-ban a Throwable osztály leszármazottjai, de mi is hozhatunk létre átlalunk definált kivételeket valamelyik Java kivétel osztály leszármazottjaként, ezeket a throw someThrowableObject; módon kell használni, ahol a throw után dobható objektumot hozunk létre vagy nevezünk meg. Ezeknek az elkapásához szükség esetén a függvénynek amikbe vannak a deklarásakor throws someThrowableClass-t írjuk a paraméterlistája után, mivel ezeket nem ebben a függvényben, hanem például az adott függvényt meghívó függvényben vagy akár a main-ben fogjuk kezelni, elkapni. Java programozási nyelvben fontos szerepe van a kivételkezelésnek mivel ennek elhagyásával akár nem is engedheti a fordítást hibát jelezve a fordító fordításkor azaz a Java VM. Ez történne az alábbi kódban is kivételkezelés nélkül:
        <programlisting language="java"><![CDATA[
            public class KapuSzkenner {
                public static void main(String[] args) {    
                    for(int i=0; i<1024; ++i;
                        try {
                            java.net.Socket socket = new java.net.Socket(args[0], i);
                            System.out.println(i + " figyeli");
                            socket.close();
                        } catch (Exception e) {
                            System.out.println(i + " nem figyeli, mivel: "+e);
                        }
                }
            }   
        ]]></programlisting>    
            A kódban ellenőrizzük hogy a futtatáskor parancssori argumentumként megadott ip cím 0 és 1024 közti portjain hány tcp kapcsolatot tudunk létrehozni és ezekhez csatlakozni a gépónkről. Ezzel ne nagyon kísérletezzünk mert támadásnak is vehetik egyes ip címeneket használva. Amint látjuk a forráskódból siker esetén kiírjuk hogy figyeli az adott számú portot, majd bezárjuk a kapcsolatot, hiba esetén kiiratjk hogy nem figyeli az adott számú portot. Amint láthatjuk VirtualBox alatt nem sikerült kapcsolatot létesítenem az elkapott hibaüzenet alapján, pedig próbáltam $HOSTNAME és localhost parancssori argumentumokkal is, lehet a tűzfal a probléma. 
        </para>
             <mediaobject>
             <imageobject>
                 <imagedata fileref="portscan.png"></imagedata>
             </imageobject>
         </mediaobject>
    </section>

    <section>
        <title>AOP</title>
        <para>
            Szőj bele egy átszövő vonatkozást az első védési programod Java átiratába! (Sztenderd védési feladat volt korábban.)
        </para>
        <para>
            Átszövő vonatkozásokat az AOP azaz aspekum orientált programozási nyelvek segítségével kéeszíthetünk, ilyen például az AspectJ programozási nyelv ami a Java programozási nyelvhez tartozik. Ennek a programozási nyelvnek a segítségével a már Java programozási nyelven megírt programkódot felhasználva módosításokat végezhetünk a program egyes részein külön programban így nem módosul az eredeti Java kód. Ezeket a módosításokat úgynevezett átszövések segítségével hajtjuk végre melyek hasonlítanak a más programozási nyelvekbeli osztályokra. Ezekben az átszövésekben használhatunk többféle függvényt a módosítások elvégzéséhez, például ha egy Java programozási nyelven megírt forráskód függvénye előtt vagy után akarunk plusz utasításokat elhelyezni akkor a pointcut függvényt használjuk. Ha viszont egy Java programozási nyelven megírt forráskód függvényt szeretnénk módosítani akkor az around függvényt használjuk. A feladat megoldásához is ezt használtam mivel elkészítettem az LZWBinfa preoreder bejárását és ehhez módosítanom kellett a kiirató függvényt:
        <programlisting language="java"><![CDATA[
        privileged aspect Aspect{
            void around(LZWBinFa fa, LZWBinFa.Csomopont elem, java.io.BufferedWriter os):
                call(public void LZWBinFa.kiir(LZWBinFa.Csomopont, java.io.BufferedWriter)) 
                    && target(fa) && args(elem, os){
                if (elem != null)
                {
                    try{
                        ++fa.melyseg;
                        for (int i = 0; i < fa.melyseg; ++i)
                            os.write("---");
                        os.write(elem.getBetu () + "(" + (fa.melyseg - 1) + ")\n");
                        fa.kiir(elem.nullasGyermek (), os);
                        fa.kiir(elem.egyesGyermek (), os);
                        --fa.melyseg;
                    }
                    catch(java.io.IOException e){
                        System.out.println("Csomópont írása nem sikerült, mivel: "+e);
                    }
                }
            }
        }
        ]]></programlisting>            
            Amint láthatjuk az egész program egy osztályban van mivel objektum-orientált programozási nyelvről van szó, és mivel apskeutust írunk így már a claas kulcsszó helyett aspect-et kell használnunk. A privileged típussal hoztuk létre az Aspect osztályunkat mivel szeretnénk hozzáférni a Java programozási nyelven megírt forráskódunk osztályának privát részeihez is. Amint már említettem az around függvényt fogjuk használni mivel az általunk módosítani kívánt függvény azaz a kiir(Csomopont, BufferedWriter) nem statikus azaz nincs a memóriában így az aspektusunk nem éri el, ezért az around függvény paramétereiben példányosítjuk a használatos objektumokat vesszővel elválasztva. Majd a : utám megadjuk hogy a call függvény paramétereként hogy melyik függvényét használjuk majd a Java programozási nyelven megírt forráskódunknak a megfelelő paraméterekkel. Majd andand jelek után megadjuk a target függvényben megadjuk hogy melyik around paraméterei közül kiválasztott objektumra fogjuk használni a meghívott kiir függvényt. majd andand után az args függvény paramétereként megadjuk hogy az around paraméterei közül melyeket használja a kiir függvény paraméterként. Az around függvény törzséen pedig a már általunk ismert preorder bejárást valósítjuk meg a megfelelő sorok felcserélésével az eredeti kód alapján. A preorder rendezésnél ugye először kiírjuk az eredményt, mivel a gyökértül indulunk, majd meghívjuk a bal oldali elemét, majd ha elfogy akkor a jobb oldalit rekúrzívan. A programnkat hibakezeltem egy be-kimeneti hibákat kezelő osztállyal, mely hiba esetén hibaüzenetet ík ki. A program futtatásához az alábbiakat kell tennünk:
        <programlisting language="java"><![CDATA[
            sudo apt install aspectj
            ajc LZWBinFa.java Aspect.aj
            java -cp /usr/share/java/aspectjrt.jar:. LZWBinFa input.txt -o output.txt
        ]]></programlisting>
        </para>
             <mediaobject>
             <imageobject>
                 <imagedata fileref="aop.png"></imagedata>
             </imageobject>
         </mediaobject>
    </section>            
            
    <section>
        <title>Anroid Játék</title>
        <para>
            Írjunk egy egyszerű Androidos „játékot”! Építkezzünk például a 2. hét „Helló, Android!” feladatára!
        </para>
        <para>            
        A program amit írtam a Snake, mely már egy elég régi játék, ahol egy kígyót irányítva eszünk egy kockát majd egy egységgel nő a kígyónk hossza mivel megettük a kockát, ezzel növelve az esélyét hogy magunkat esszük meg és véget ér a játék. Minden kocka elfogyasztása egy pontot ér.
        <programlisting language="java"><![CDATA[
import android.app.Activity;
import android.graphics.Point;
import android.os.Bundle;
import android.view.Display;
 
public class SnakeActivity extends Activity {
 
     SnakeEngine snakeEngine;
 
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
 
        Display display = getWindowManager().getDefaultDisplay();
 
        Point size = new Point();
        display.getSize(size);
 
        snakeEngine = new SnakeEngine(this, size);
 
        setContentView(snakeEngine);
    }

@Override
protected void onResume() {
	super.onResume();
	snakeEngine.resume();
}
 
@Override
protected void onPause() {
	super.onPause();
	snakeEngine.pause();
}
}
        ]]></programlisting>
        A programunk két fájból áll és Java programozási nyelven íródott amint láthatjuk az import kulcsszó használatából, amellyel a használatos könyvtárakat impementáljuk. A SnakeActivity programban létrehozunk egy SnakeActivity osztályt az Activity osztály leszármazottjaként, mivel felhasználjuk az Activity osztály függvényeit. Ez az Activity osztály hoz létre egy képernyőt majd a telefonunkon, és ennek a setContentView függvényével jelenítjük meg a snakeEngine objektumot, melyet az onCreate függvényben hozunk létre konstruktorával, ezzel átadva a kijelzőnk pixelméretét és az aktuális objektumot mellyel majd hivatkozhatunk az Activity osztály függvényeire. Majd az onResume és onPause függvények segítségével megadjuk hogy folytatódjon és megálljon a program szálának működése.     
        <programlisting language="java"><![CDATA[
import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.graphics.Point;
import android.media.AudioManager;
import android.media.SoundPool;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import java.io.IOException;
import java.util.Random;
import android.content.res.AssetManager;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
 
class SnakeEngine extends SurfaceView implements Runnable {            

private Thread thread = null;
 
private Context context;
 
public enum Heading {UP, RIGHT, DOWN, LEFT}

private Heading heading = Heading.RIGHT;
 
private int screenX;
private int screenY;
 
private int snakeLength;
 
private int bobX;
private int bobY;
 
private int blockSize;

private final int NUM_BLOCKS_WIDE = 40;
private int numBlocksHigh;
 
private long nextFrameTime;

private final long FPS = 10;

private final long MILLIS_PER_SECOND = 1000;

private int score;
 
private int[] snakeXs;
private int[] snakeYs;
 
private volatile boolean isPlaying;
 
private Canvas canvas;
 
private SurfaceHolder surfaceHolder;
 
private Paint paint;

public SnakeEngine(Context context, Point size) {
	super(context);
 
	context = context;
 
	screenX = size.x;
	screenY = size.y;
 
	
	blockSize = screenX / NUM_BLOCKS_WIDE;
	
	numBlocksHigh = screenY / blockSize;
 
	surfaceHolder = getHolder();
	paint = new Paint();
 
 snakeXs = new int[200];
	snakeYs = new int[200];
 
	newGame();
}

@Override
public void run() {
	
	while (isPlaying) {
 
		if(updateRequired()) {
			update();
			draw();
		}
 
	}
}    
 
public void pause() {
	isPlaying = false;
	try {
		thread.join();
	} catch (InterruptedException e) {
	}
}
 
public void resume() {
	isPlaying = true;
	thread = new Thread(this);
	thread.start();
}

public void newGame() {
    
    snakeLength = 1;
    snakeXs[0] = NUM_BLOCKS_WIDE / 2;
    snakeYs[0] = numBlocksHigh / 2;
 
    spawnBob();
 
    score = 0;
 
    nextFrameTime = System.currentTimeMillis();
}

public void spawnBob() {
    Random random = new Random();
    bobX = random.nextInt(NUM_BLOCKS_WIDE - 1) + 1;
    bobY = random.nextInt(numBlocksHigh - 1) + 1;
}

private void eatBob(){
    
    snakeLength++;
    
    spawnBob();

    score = score + 1;
    soundPool.play(eat_bob, 1, 1, 0, 0, 1);
}

private void moveSnake(){
   
    for (int i = snakeLength; i > 0; i--) {
        
        snakeXs[i] = snakeXs[i - 1];
        snakeYs[i] = snakeYs[i - 1];
 
       
    }

    switch (heading) {
        case UP:
            snakeYs[0]--;
            break;
 
        case RIGHT:
            snakeXs[0]++;
            break;
 
        case DOWN:
            snakeYs[0]++;
            break;
 
        case LEFT:
            snakeXs[0]--;
            break;
    }
}

private boolean detectDeath(){

    boolean dead = false;
 
    if (snakeXs[0] == -1) dead = true;
    if (snakeXs[0] >= NUM_BLOCKS_WIDE) dead = true;
    if (snakeYs[0] == -1) dead = true;
    if (snakeYs[0] == numBlocksHigh) dead = true;
 
    for (int i = snakeLength - 1; i > 0; i--) {
        if ((i > 4) && (snakeXs[0] == snakeXs[i]) && (snakeYs[0] == snakeYs[i])) {
            dead = true;
        }
    }
 
    return dead;
}

public void update() {
 
    if (snakeXs[0] == bobX && snakeYs[0] == bobY) {
        eatBob();
    }
 
    moveSnake();
 
    if (detectDeath()) {
 
        soundPool.play(snake_crash, 1, 1, 0, 0, 1);
 
        newGame();
    }
}

public void draw() {
	
	if (surfaceHolder.getSurface().isValid()) {
		canvas = surfaceHolder.lockCanvas();
 
		canvas.drawColor(Color.argb(255, 26, 128, 182));
 
		paint.setColor(Color.argb(255, 255, 255, 255));
 
		paint.setTextSize(90);
		canvas.drawText("Score:" + score, 10, 70, paint);
 
		for (int i = 0; i < snakeLength; i++) {
			canvas.drawRect(snakeXs[i] * blockSize,
					(snakeYs[i] * blockSize),
					(snakeXs[i] * blockSize) + blockSize,
					(snakeYs[i] * blockSize) + blockSize,
					paint);
		}
 
		paint.setColor(Color.argb(255, 255, 0, 0));
 
		canvas.drawRect(bobX * blockSize,
				(bobY * blockSize),
				(bobX * blockSize) + blockSize,
				(bobY * blockSize) + blockSize,
				paint);
 
  		surfaceHolder.unlockCanvasAndPost(canvas);
	}
}

public boolean updateRequired() {
 
    if(nextFrameTime <= System.currentTimeMillis()){
                
        nextFrameTime =System.currentTimeMillis() + MILLIS_PER_SECOND / FPS;
 
        return true;
    }
 
    return false;
}

@Override
public boolean onTouchEvent(MotionEvent motionEvent) {
 
    switch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {
        case MotionEvent.ACTION_UP:
            if (motionEvent.getX() >= screenX / 2) {
               switch(heading){
                   case UP:
                       heading = Heading.RIGHT;
                       break;
                   case RIGHT:
                       heading = Heading.DOWN;
                       break;
                   case DOWN:
                       heading = Heading.LEFT;
                       break;
                   case LEFT:
                       heading = Heading.UP;
                       break;
               }
            } else {
                switch(heading){
                    case UP:
                        heading = Heading.LEFT;
                        break;
                    case LEFT:
                        heading = Heading.DOWN;
                        break;
                    case DOWN:
                        heading = Heading.RIGHT;
                        break;
                    case RIGHT:
                        heading = Heading.UP;
                        break;
                }
            }
    }
    return true;
}
}
       ]]></programlisting>
       Amint láthatjuk a másik fájlban a főosztályunk örökli a SurfaceView és Runnable osztályokat melyek segítségével használhatjuk a setContentView függvény megfelelő működéséhez a másik fájlunkban és a Runnable oszályal készíthetünk szálakat a Thread objektummal és a run függvénnyel futtathatjuk ezt. Majd bevezetjük a használatos objektumokat, változókat. A SnakeEngine objekum konstruktorában átadjuk a SnakeActivity-ből átvett értékeket, majd kiszámítjuk hogy ha 40 blokkot léphet oldalasan a kígyó, akkor mennyi lesz egy blokk szélessége ajd magassága a kijelző pixelméretéből. Majd inicializáljuk a rajzoláshoz szükséges objektumokat és létrehozunk két tömböt a kígyó egyes blokkjainak az x és y koordinátáival történő tárolásához, mely 200-200 elemű így 200 blokkot ehetünk vele, max 200-ig megy a játék. Majd a NewGame függvényt meghívjuk amivel elkezdődik a játék. A run függvényben megadjuk hogy mit csináljon a szálunk, amint láthatjuk egy while ciklust tartalmaz ami addig fut amíg az isPlaying változó igaz, a ciklus utasításai végrehajtódnak ha az updateRequired() függvény visszatérési értéke igaz, így ekkor meghívódnak az update és draw függvények. A pause függvényt ugye az onPause függvény hívja meg amikor szünetel az alkalmazás azaz nincs képernyőn. A pause függvényben az isPlaying változó értékét false-ra állítjuk így kilép a while ciklus és befejeződik a run így véget ér a szál, de mivel lehet a run függvény még egy while ciklusbeli utasításban jár így meghívjuk a join() függvényt a szálra ami addig vár amíg a szál véget nem ér, ezt hibakzeljük a hozzátartozó error-ral ami a szál megszakadásakor hívódik meg. A join függvény segítségével addig szünetel a program míg a szál véget nem ér. A resume függvényt az onPresume függvény hívja meg, ami a program indításakor hívódik meg, majd minden pause függvény után. A pause függvényben az isPlaying változó értékét true-ra állítjuk hogy majd fusson a while ciklus amíg a pause() le nem állítja, majd létrehozunk egy Thread objektumot azaz egy szálat thread néven az aktuális objektumból melynek ugye ősosztálya kell hogy legyen a Runnable osztály. Majd a start függvényt meghívva a thread objektumra elindítjuk a szálat és meghívjuk a run függvényt. A newGame függvényt a SnakeEngine osztály konstruktora hívja meg, amit pedig az onCreate függvény a program indulásakor. A NewGame függvényben a kígyóhosszát 1-re állítjuk a SnakeLenght változó értékében, majd a SnakeXs és SnakeYs tömbök nulladik elemét azaz a kígyó első blokkját a fejét beállítjuk a képernyő közepére, amit a vízszintes blokkok és a függőleges blokkok számának a fele ad meg. Majd meghívjuk a snawBob függvényt és a Score változó értékét 0-ra állítjuk, majd a nextFrameTime változó értékét az aktuális időre állítjuk milliszekundumban. A spawnBob függvényben random számot generálunk a kígyó ételének a koordinátáinak a meghatározásához, ehhez példányosítunk egy Random objektumot, majd meghívjuk rá a nextInt függvényt, melynek paramétereként megadunk egy számot és visszad egy egész számot 0-tól és az adott szám -1 közt, jelen esetben csökkentettük a maximum értéket eggyel, majd az eredményt növeltük eggyel így 1 és blokkszáma-1 közt értékeket kapunk az x és y koordintátkban. Az eatBob függvényünkben megnöveljük a kígyónk hosszát eggyel, majd meghívjuk a spawnBob függvényünket és a score értékét is megnöveljük eggyel. A moveSnake függvényben egy for ciklussal a kígyó farkától átállítjuk a korrdinátákat az előzőjére rekurzívan, mivel minden kígyó blokk követi a fej blokk lépését. Majd a fej koordinátáit tartalmazó tömbrész értékeit módosítjuk a lépésnek megfelelően azaz a heading változó értéke alapján egy switch utasításban. A detectDeaths függvény segítségével ellenőrizzük hogy meghalt e a kígyónk, a függvényben először a visszatérési értéket false-ra állítjuk, majd true-ra ha kiment a kijelzőről a kígyó azaz a 0 és a blokkszám értékén kívül esik a kígyó fejének x vagy y koordinája, illetve ha magát ette volna, ehhez meg kell egyeznie ugye az egyik test blokknak a fej blokkjával mind az x mind az x koordinátákra vonatkozóan és ez ugye a kígyónak mimimum 5 blokk hosszúnak kell lennie. Az update függvényben meghívjuk az eatBob függvényt ha a kígyó ételt evett, ezt egy if feltétellel ellnőrizzük mivel ekkor páronként megkell eggyeznie a kígyó fej és étel x és y koordinátáinak. Majd meghívjuk a moveSnake függvényt, majd indítunk egy új játékot ha meghalt a kígyónk a newGame függvény segítségével, a halálát pedig a detectDeathfüggvény visszatérési értéke adja. A draw függvényben a létrehozott Canvas objektumunkon rajzolunk, ehhez használjuk a SurfaceHolder osztályt, mely megjeleníti a vásznas módosításokat. Előszor beállítjuk a háttérszínet, majd kiíratjuk a Score-t a hozzátartozó eredményünkkel és kirajzoljuk a kígyónkat blokkonként, de előtte beállítjuk a fehér színét, majd az étel színének beállítása után kirajzoltassuk az ételt is. Majd befejezzük a rajzolást az unlockCanvasAndPost függvényt meghívva a vászonra. Az updateRequired függvényben beállítjuk az FPS és MILLIS_PER_SECOND vávltozók értékeit felhasználva meghatározzuk mennyi időközönként frissüljön a kirajzolás a képernyőn, ha eltelt az idő a visszatérési érték true így frissíthet, ha nem akkor nem. Ez nyilván rendszerfüggő is és az első frissítést rögtön végrehajtja mivel a currenTime-t közvetlenül számolja még ki akkor nem a képletből az általunk bővített értékkel. Ezzel nyilván erőforrást kímélünk, elkerülve a lépés nélküli frissítéseket, hogy ne ugyanazt rajzolgassa kifelé a rendszer vagy gyengébb rendszer esetén ne rosszul rajzolja ki a kígyót esetlegesen a blookok pozícinálása közben. A volatilate kulcsszót használva a memóriába rakhatjuk az adott változót nem csak a CPU cache-ba, ahogy az isPlaying változót is. Ennek használata a több szál használatakor lehet szükséges hogy mindegyik szálra egyezzen az értéke. Az enum kulcsszó segítségével speciális osztályokat hozhatunk létre melyek elemei konstansok és elemeire enumnév.konstansnév.-vel hivatkozhatunk. Jelen esetben ezt használtuk a kígyó mozgási irányának a kezelésére. A @pverride-al jelöljük hogy felülírjuk az ősosztálybeli függvény múködését az aktuális alosztályunkba. Az onTouchEvent-ben kezeljük hogy a felhasználó merre mozdíítja az ujját a kijelzőm. hol emeli fel, ha rajtatartja végig az ujját akkor úgy nem lépne semerre, mert a felengedésből határozza meg az irányt az ACTIO_UP függvénnyel ami visszadja a felengedés előtti mozdulat irányát. Majd külön kezeljük azt hogy a kijelző bal vagy jobb oldalán adjuk az irányt a kígyónak, mert nem mindegy hogy merre megy a feje. Ezt alapállapotként jobbra állítjuk be.                                                                                                                              
        </para>
             <mediaobject>
             <imageobject>
                 <imagedata fileref="snake.png"></imagedata>
             </imageobject>
         </mediaobject>
    </section> 

    <section>
        <title>Junit teszt</title>
        <para>
            A https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat poszt kézzel számított mélységét és szórását dolgozd be egy Junit tesztbe (sztenderd védési feladat volt korábban)
        </para>
        <para>            
            A feladat alapján Unit keretrendszert kell használnunk, melynek segítségével teszteket hajthatunk végre egy Java programozási nyelven megírt forráskódon, tehát ellenőrizhetjük hogy a programunk egyes függvényei a vártnak megfelelő értékekkel tértek e vissza. A feladatunk az volt hogy ellenőrizzük a binfa által kiszámított értékeket egy adott sztringre, ehhez a kiszámolt értékeket az alábbi linken találhatunk például: https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat . Ezt a linket láthatjuk a feladat szövegében is, ehhez az alábbi kódot készítettem:
        <programlisting language="java"><![CDATA[
                import static org.junit.jupiter.api.Assertions.*;
                import org.junit.jupiter.api.Test;
                
                public class LZWBinFaTest {
                LZWBinFa binfa = new LZWBinFa();             
                String str = "0111100101100";
                @Test
                public void atlagTest() {
                    for(int i = 0; i < str.length(); i++){
                        binfa.push_back(str.charAt(i));
                    }
                    double atlag = binfa.getAtlag();
                    assertEquals(2.25, atlag, 0.001);
                }
                @Test
                public void szorasTest() {
                    for(int i = 0; i < str.length(); i++){
                        binfa.push_back(str.charAt(i));
                    }
                    double szoras = binfa.getSzoras();
                    assertEquals(0.5, szoras, 0.001);
                }
                @Test
                public void melysegTest() {
                    for(int i = 0; i < str.length(); i++){
                    binfa.push_back(str.charAt(i));
                    }
                    double melyseg = binfa.getMelyseg();
                    assertEquals(3, melyseg);
                    }
                }
        ]]></programlisting>    
        Amint láthatjuk a kódunk sima Java programozási nyelven írt kódnak néz ki, de tartalmaz @Test makrót mely arra utal hogy teszt függvényt használunk, de ezek előtt példányosítanunk kell egy binfa objektumot, mivel minden @Test függvény külön objektumot fog használni az ellenőrzéshez. A teszt függvényekben egy for ciklussal végigmegyünk a bemeneti sztringen és karaktereknént beolvassuk a binfa-ba, majd ellenőrizzük az assertEquals függvénnyel hogy a binfa adott függvénye megegyezik e az adott értékkel. Ezeket az első kétparaméterében adjuk meg, de megadhatunk egy harmadik paramétert is mely a két hasonlítandó érték közti maximum eltérést jelenti. Ez utóbbi használata akkor szükséges ha nem egész értékeket számolunk, lebegőpontos számításokat végezve a kerekítések miatt.
        </para>
             <mediaobject>
             <imageobject>
                 <imagedata fileref="unittest.png"></imagedata>
             </imageobject>
         </mediaobject>
    </section>

    <section>
        <title>OSCI</title>
        <para>
            Készíts egyszerű C++/OpenGL-es megjelenítőt, amiben egy kocsit irányítasz az úton. 
        </para>
        <para>            
            A feladatot az Unreal Engine 4 programmal oldottam meg, ez egyszerű lehetőséget ad álataluk létrehozott objektumok megjelenítésére, mozgatására különböző textúrákban, illetve létrehozhatunk vehicle típusú projektet is C++ nyelven például a QT kreretrendszer segítségével. A projekteinken dolgozhatunk akár grafikusan is, a programot az alábbi linkről tölthetjük le: https://github.com/soxueren/EpicGames-UnrealEngine , a git clone segítségével a parancssorból vagy zip-el tömörítve. Letöltés után pedig a setup.sh fájlt futtatva a ./ kifejezéssel a parancssorból futtathatjuk a programot, ahol létrehozunk egy Vehicle típúsu projektet, ezzel kapunk egy alapprojektet, melyet fejlesztetünk:
        <programlisting language="c++"><![CDATA[
	AOSCIPawn::AOSCIPawn()
{
// Car mesh
static ConstructorHelpers::FObjectFinder<USkeletalMesh> CarMesh(TEXT("/Game/Vehicle/Sedan/Sedan_SkelMesh.Sedan_SkelMesh"));
GetMesh()->SetSkeletalMesh(CarMesh.Object);
static ConstructorHelpers::FClassFinder<UObject> AnimBPClass(TEXT("/Game/Vehicle/Sedan/Sedan_AnimBP"));
GetMesh()->SetAnimInstanceClass(AnimBPClass.Class);
// Simulation
UWheeledVehicleMovementComponent4W* Vehicle4W = CastChecked<UWheeledVehicleMovementComponent4W>(GetVehicleMovement());
check(Vehicle4W->WheelSetups.Num() == 4);
Vehicle4W->WheelSetups[0].WheelClass = UOSCIWheelFront::StaticClass();
Vehicle4W->WheelSetups[0].BoneName = FName("Wheel_Front_Left");
Vehicle4W->WheelSetups[0].AdditionalOffset = FVector(0.f, -12.f, 0.f);
Vehicle4W->WheelSetups[1].WheelClass = UOSCIWheelFront::StaticClass();
Vehicle4W->WheelSetups[1].BoneName = FName("Wheel_Front_Right");
Vehicle4W->WheelSetups[1].AdditionalOffset = FVector(0.f, 12.f, 0.f);
Vehicle4W->WheelSetups[2].WheelClass = UOSCIWheelRear::StaticClass();
Vehicle4W->WheelSetups[2].BoneName = FName("Wheel_Rear_Left");
Vehicle4W->WheelSetups[2].AdditionalOffset = FVector(0.f, -12.f, 0.f);
Vehicle4W->WheelSetups[3].WheelClass = UOSCIWheelRear::StaticClass();
Vehicle4W->WheelSetups[3].BoneName = FName("Wheel_Rear_Right");
Vehicle4W->WheelSetups[3].AdditionalOffset = FVector(0.f, 12.f, 0.f);
UOSCIWheelFront::UOSCIWheelFront()
{
    ShapeRadius = 35.f;
    ShapeWidth = 10.0f;
    bAffectedByHandbrake = false;
    SteerAngle = 50.f;
}
UOSCIWheelRear::UOSCIWheelRear()
{
	ShapeRadius = 35.f;
	ShapeWidth = 10.0f;
	bAffectedByHandbrake = true;
	SteerAngle = 0.f;
}
// Create a spring arm component
SpringArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("SpringArm0"));
SpringArm->TargetOffset = FVector(0.f, 0.f, 200.f);
SpringArm->SetRelativeRotation(FRotator(-15.f, 0.f, 0.f));
SpringArm->SetupAttachment(RootComponent);
SpringArm->TargetArmLength = 600.0f;
SpringArm->bEnableCameraRotationLag = true;
SpringArm->CameraRotationLagSpeed = 7.f;
SpringArm->bInheritPitch = false;
SpringArm->bInheritRoll = false;
// Create camera component 
Camera = CreateDefaultSubobject<UCameraComponent>(TEXT("Camera0"));
Camera->SetupAttachment(SpringArm, USpringArmComponent::SocketName);
Camera->bUsePawnControlRotation = false;
Camera->FieldOfView = 90.f;
InternalCameraOrigin = FVector(0.0f, -40.0f, 120.0f);
InternalCameraBase = CreateDefaultSubobject<USceneComponent>(TEXT("InternalCameraBase"));
InternalCameraBase->SetRelativeLocation(InternalCameraOrigin);
InternalCameraBase->SetupAttachment(GetMesh());
InternalCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("InternalCamera"));
InternalCamera->bUsePawnControlRotation = false;
InternalCamera->FieldOfView = 90.f;
InternalCamera->SetupAttachment(InternalCameraBase);
//Setup TextRenderMaterial
static ConstructorHelpers::FObjectFinder<UMaterial> TextMaterial(TEXT("Material'/Engine/EngineMaterials/AntiAliasedTextMaterialTranslucent.AntiAliasedTextMaterialTranslucent'"));
UMaterialInterface* Material = TextMaterial.Object;
// Create text render component for in car speed display
InCarSpeed = CreateDefaultSubobject<UTextRenderComponent>(TEXT("IncarSpeed"));
InCarSpeed->SetTextMaterial(Material);
InCarSpeed->SetRelativeLocation(FVector(70.0f, -75.0f, 99.0f));
InCarSpeed->SetRelativeRotation(FRotator(18.0f, 180.0f, 0.0f));
InCarSpeed->SetupAttachment(GetMesh());
InCarSpeed->SetRelativeScale3D(FVector(1.0f, 0.4f, 0.4f));
// Create text render component for in car gear display
InCarGear = CreateDefaultSubobject<UTextRenderComponent>(TEXT("IncarGear"));
InCarGear->SetTextMaterial(Material);
InCarGear->SetRelativeLocation(FVector(66.0f, -9.0f, 95.0f));	
InCarGear->SetRelativeRotation(FRotator(25.0f, 180.0f,0.0f));
InCarGear->SetRelativeScale3D(FVector(1.0f, 0.4f, 0.4f));
InCarGear->SetupAttachment(GetMesh());
// Colors for the incar gear display. One for normal one for reverse
GearDisplayReverseColor = FColor(255, 0, 0, 255);
GearDisplayColor = FColor(255, 255, 255, 255);
// Colors for the in-car gear display. One for normal one for reverse
GearDisplayReverseColor = FColor(255, 0, 0, 255);
GearDisplayColor = FColor(255, 255, 255, 255);
bInReverseGear = false;
}
void AOSCIPawn::SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent)
{
	Super::SetupPlayerInputComponent(PlayerInputComponent);
	// set up gameplay key bindings
	check(PlayerInputComponent);
	PlayerInputComponent->BindAxis("MoveForward", this, &AOSCIPawn::MoveForward);
	PlayerInputComponent->BindAxis("MoveRight", this, &AOSCIPawn::MoveRight);
	PlayerInputComponent->BindAxis("LookUp");
	PlayerInputComponent->BindAxis("LookRight");
	PlayerInputComponent->BindAction("Handbrake", IE_Pressed, this, &AOSCIPawn::OnHandbrakePressed);
	PlayerInputComponent->BindAction("Handbrake", IE_Released, this, &AOSCIPawn::OnHandbrakeReleased);
	PlayerInputComponent->BindAction("SwitchCamera", IE_Pressed, this, &AOSCIPawn::OnToggleCamera);
	PlayerInputComponent->BindAction("ResetVR", IE_Pressed, this, &AOSCIPawn::OnResetVR); 
}
void AOSCIPawn::MoveForward(float Val)
{
    GetVehicleMovementComponent()->SetThrottleInput(Val);
}
void AOSCIPawn::MoveRight(float Val)
{
    GetVehicleMovementComponent()->SetSteeringInput(Val);
}
void AOSCIPawn::OnHandbrakePressed()
{
    GetVehicleMovementComponent()->SetHandbrakeInput(true);
}
void AOSCIPawn::OnHandbrakeReleased()
{
    GetVehicleMovementComponent()->SetHandbrakeInput(false);
}
void AOSCIPawn::OnToggleCamera()
{
    EnableIncarView(!bInCarCameraActive);
}
void AOSCIPawn::OnResetVR()
{
#if HMD_MODULE_INCLUDED
	if (GEngine->XRSystem.IsValid())
	{
		GEngine->XRSystem->ResetOrientationAndPosition();
		InternalCamera->SetRelativeLocation(InternalCameraOrigin);
		GetController()->SetControlRotation(FRotator());
	}
#endif // HMD_MODULE_INCLUDED
}
void AOSCIPawn::EnableIncarView(const bool bState, const bool bForce)
{
	if ((bState != bInCarCameraActive) || ( bForce == true ))
	{
		bInCarCameraActive = bState;
		if (bState == true)
		{
			OnResetVR();
			Camera->Deactivate();
			InternalCamera->Activate();
		}
		else
		{
			InternalCamera->Deactivate();
			Camera->Activate();
		}
		InCarSpeed->SetVisibility(bInCarCameraActive);
		InCarGear->SetVisibility(bInCarCameraActive);
	}
}
void AOSCIPawn::SetupInCarHUD()
{
    APlayerController* PlayerController = Cast<APlayerController>(GetController());
    if ((PlayerController != nullptr) && (InCarSpeed != nullptr) && (InCarGear != nullptr) )
    {
        // Setup the text render component strings
        InCarSpeed->SetText(SpeedDisplayString);
        InCarGear->SetText(GearDisplayString);
        if (bInReverseGear == false)
        {
            InCarGear->SetTextRenderColor(GearDisplayColor);
        }
        else
        {
            InCarGear->SetTextRenderColor(GearDisplayReverseColor);
        }
    }
}
void AOSCIPawn::UpdateHUDStrings()
{
    float KPH = FMath::Abs(GetVehicleMovement()->GetForwardSpeed()) * 0.036f;
    int32 KPH_int = FMath::FloorToInt(KPH);
    // Using FText because this is display text that should be localizable
    SpeedDisplayString = FText::Format(LOCTEXT("SpeedFormat", "{0} km/h"), FText::AsNumber(KPH_int));
    if (bInReverseGear == true)
    {
        GearDisplayString = FText(LOCTEXT("ReverseGear", "R"));
    }
    else
    {
        int32 Gear = GetVehicleMovement()->GetCurrentGear();
        GearDisplayString = (Gear == 0) ? LOCTEXT("N", "N") : FText::AsNumber(Gear);
    }	
}
void AOSCIPawn::Tick(float Delta)
{
	Super::Tick(Delta);
	// Setup the flag to say we are in reverse gear
	bInReverseGear = GetVehicleMovement()->GetCurrentGear() < 0;
	// Update the strings used in the hud (incar and onscreen)
	UpdateHUDStrings();
	// Set the string in the incar hud
	SetupInCarHUD();
	bool bHMDActive = false;
#if HMD_MODULE_INCLUDED
	if ((GEngine->XRSystem.IsValid() == true) && ((GEngine->XRSystem->IsHeadTrackingAllowed() == true) || (GEngine->IsStereoscopic3D() == true)))
	{
		bHMDActive = true;
	}
#endif // HMD_MODULE_INCLUDED
	if (bHMDActive == false)
	{
		if ( (InputComponent) && (bInCarCameraActive == true ))
		{
			FRotator HeadRotation = InternalCamera->RelativeRotation;
			HeadRotation.Pitch += InputComponent->GetAxisValue(LookUpBinding);
			HeadRotation.Yaw += InputComponent->GetAxisValue(LookRightBinding);
			InternalCamera->RelativeRotation = HeadRotation;
		}
	}
}
void AOSCIPawn::BeginPlay()
{
	Super::BeginPlay();
	bool bEnableInCar = false;
#if HMD_MODULE_INCLUDED
	bEnableInCar = UHeadMountedDisplayFunctionLibrary::IsHeadMountedDisplayEnabled();
#endif // HMD_MODULE_INCLUDED
	EnableIncarView(bEnableInCar,true);
}
        ]]></programlisting>    
	Az AOSCIPawn osztályban hozzuk létre a járművünket, amit mozgatni fogunk. Az osztály konstruktorában megadjuk a járműnek a rajzát és az animásióját tartalmazó fájlokat, majd beállítjuk a járműnek a szimulációját, azaz a kerekeinek a mozgásához az adatokat. Mivel 4 kerekű az autónk így a 4W-s verziót használtuk, majd ellenőrizzük tényleg meg van e a 4 kerekünk a check függvény segítségével. Majd helyükre rakjuk a kerekeket az AddtionalOffset segítségével egy 3dimenziós vektor segítségével és megadjuk a WheelClass segítségével az oszályt melyben beállítjuk a kerekek méretét szélesség és magasságainak megadásával, illetve elfordulási szögét és hogy fékezze e a kézifék, majd megadjuk a kerék nevét a BoneName segítségével. A könnyebb beállíthatóság érdekében külön osztályokba van véve az első és hátsó tengely kerekeinek beállításai, mivel a kereknek tengelyenként azonosnak kell lenniük, illetve az első kerekeket kormányozzuk és a kézifék is csak a hátsó kerekekre hat. A spring arm segítségével beállítjuk hogy kezelje a kamera ha eltakarná egy másik objektum a miénket, azaz a kocsit, mivel ezzel tudjuk forgatni a karmerát a megadott szögben, forgási sebességgel, poziícióból. Majd létrehozzuk a kameránkat ennek segítségével, és megadjuk hogy a kocsi ne forgassa a kamerát forduláskor, illetve a látószögünk 90 fok lesz, ezzel térbeli hatást érünk el. Majd létrehozunk egy belső kamerát is hasonló beállításokkal, de spring arm használata nélkül, mivel itt nem lesz takarás és a kamera kocsi belsjében van. Mivel a kijelzőn megakarjuk jeleníteni szövegként a sebességet és a sebesség fokozatot, ehhez külső forrást kell beimportálnunk a szöveges anyagokat, majd pozícióját és színét is beállítjuk a megjelenítendő szövegnek. A kocsi mozgatásához szükséges eseményeket a BindAction, BindAxis függvények segítségével vesszük fel, mely hasonlít a QT szignal-slot mechanizmusához. Majd deiniáljuk az ezek által használt függvényeket, melyek a gázadást, fordulást mérik, illetve a kézifék állapotát. Az OnToggleCamera függvénnyel pedig kamerát váltunk úgy hogy bekapcsoljuk az egyiket a másikat ki és a sebességet és fokazatot megjelnítjük. Beállítjuk hogy az autó belsejében is megjelnítődjön a sebesség és a fokozat és előre-hátra menet esetén eltérő színeket használjunk. Az updateHUDSString függvényben kiszámítjuk a sebességet km/h-ba ugye átváltva az aktuális m/s-ot, majd egészre lekerekítve, majd ezt kiíratjuk 0 km/h formában 0 alapértékkel. A sebességi fokozat kiíratásánál ha az autó hátramenetbe van R-t írunk ki, üres esetén N-et, egyébként az aktuális sebesség számát. Majd a Tick függvényben ellenőrizzük ha kisebb sebességben vagyunk 0-nál akkor hátramenetben vagyunk, true lesz a bInReverseGear változó értéke, egyébként hamis, majd meghívjuk a kiíratásokat végző függvényeket. A BeginPlay függvényben megadjuk hogy a külső kameraállás legyen az alapértelmezett és meghívjuk a kamerakezelő függvényünket hogy megjelnítse a sebesség és fokazat adatokat is. Az elkészüt autónk köré a világot az Unreal Editor segítségével létrehozhatjuk egyszerűen és már működik is a program.
        </para>
             <mediaobject>
             <imageobject>
                 <imagedata fileref="osci.png"></imagedata>
             </imageobject>
         </mediaobject>
    </section>
</chapter>
