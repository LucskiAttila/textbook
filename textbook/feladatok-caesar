<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>int ***</type> háromszögmátrix</title>
	<para>
Írj egy olyan malloc és free párost használó C programot, amely helyet foglal egy alsó háromszög
mátrixnak a szabd tarban!
	</para>
	 <programlisting language="c">
                <![CDATA[
#include <stdio.h>
#include <stdlib.h>

int
main ()
{
    int nr = 5;
    double **tm;

    if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL)
    {
        return -1;
    }

    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }

    }

    for (int i = 0; i < nr; ++i)
        for (int j = 0; j < i + 1; ++j)
            tm[i][j] = i * (i + 1) / 2 + j;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    tm[3][0] = 42.0;
    (*(tm + 3))[1] = 43.0;	// mi van, ha itt hiányzik a külső ()
    *(tm[3] + 2) = 44.0;
    *(*(tm + 3) + 3) = 45.0;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    for (int i = 0; i < nr; ++i)
        free (tm[i]);

    free (tm);

    return 0;
}
]]>
</programlisting>
        <para>
           Eloszor lefoglaljuka helyet az alsoharomszog matrixnak majd feltoltjuk adatokkal aztan kiiratjuk es toroljuk a lefoglalt helyet. A matrix minden ertekenek double a mertet foglalunk le, sorainak double*-t es az osszertknek double**-t. A double** pointer altal mutatott memoriateruletre mentunk csak pontosan. Letrehozzuk az nr valtozot egesz tipussal es 5 ertekkel. A tm valtozot deklaraljuk mutatokent ami egy double tipusra mutat. A double **tm is foglal le tarhelyet. A tm pointer tipusuvaltozoba lefoglal a malloc fuggveny nr-szer ami ugye most 5 sizof(double*)-nyi helyet ami a double* mertet jelenti. A malloc az operacios rendszertol ker memoriat erdetileg void* mutatoval de itt double** a mutatoja a double*-nak igy tipuskenyzeritjuk a zarojelbe. Ha nem lenne tarhely akkor NULL erteket kap a tm es kilep a program. A sorok oszlopainak for ciklussal foglalunk helyet. Mivel alsoharomszog matrix igy a 0-ik sorba 1 double mertenyi azaz 8 byte ezen az operaciosrendszeren kellessz. Mindegyik sorba egyel tobb es az utolsoba mi a 4.-ik (1+4)*8 azaz 40 byte kellessz. Ha elfogy a tarhely akkor itt is NULL erteket kap es kilep a program, -1-et kap a main fuggveny. Itt minden double-hoz double* pointer tartozik. Majd 2 egymasba agyazott for ciklussal feltoltjuk a lefoglalt tarhelyeket elemekkel. Az ertekeket soronkent adja meg a keplet szerint. Majd kiiratjuk az ertekeket a printf fugveny segitsegevel szokoz es enter megfelelo hasznalataval. A tm[3][0] = 42.0; a 3. sor 0. elemet irja at. A (*(tm + 3))[1] = 43.0; a 3. sor 1. oszlopanak elemet. A  *(tm[3] + 2) = 44.0; a 3. sor 2. oszlopat irja at. A *(*(tm + 3) + 3) = 45.0; a 3. sor 3. oszlopat irja at. A  *(tm + 3)[1] = 43.0; a 4. sor 0. oszlopat irja at. A free fuggveny felszabaditja a malloc altal lefoglalt memoriat a tm es tm[i]-kre vonatkozoan.
      </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
 <programlisting language="c">
                <![CDATA[
#include <stdio.h>
#include <unistd.h>
#include <string.h>

#define MAX_KULCS 100
#define BUFFER_MERET 256


int
main (int argc, char **argv)
{

  char kulcs[MAX_KULCS];
  char buffer[BUFFER_MERET];

  int kulcs_index = 0;
  int olvasott_bajtok = 0;

  int kulcs_meret = strlen (argv[1]);
  strncpy (kulcs, argv[1], MAX_KULCS);

  while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
    {

      for (int i = 0; i < olvasott_bajtok; ++i)
	{

	  buffer[i] = buffer[i] ^ kulcs[kulcs_index];
	  kulcs_index = (kulcs_index + 1) % kulcs_meret;

	}

      write (1, buffer, olvasott_bajtok);

    }
}
]]>
</programlisting>
	<para>
	A #define szoval definialjuk a konstansokat C-ben nevukkel majd ertekukkel, ezeknek az erteke a program futasa alatt nem valtozik meg es az egesz fajlba ervenyesek az ertekei. A main fuggveny argc parametere a program futtatasat tartalmazo parancssori argumentumok szamat tartlalmazo valtozo beleertve a program nevet, az argv a parancssori argumentumok szavait tartalmazo vektor. C-ben a vektor indexei 0-tol indulnak. A char szoval deklaraljuk a karakter tipusu valtozokat. Jelen esetben letrehoztuk a kulcs es buffer nevu valtozot 100 es 256 elemmel. C-ben valtozok letrehozasakor a nev[x] eseten x a meret, de hivatkozas nev[x-1]-ig megy nev[0]-tol. Az int szot az egesz szam erteku valtozok deklaralasara hasznaljuk. Inicializaltuk 0 ertekre a kulcs_index es olvasott_bajtok valtozokat. A kulcs_meret valtozo ertteket a futtataskor megadott kulcs hossza. Ezt az strlen fuggveny segitsegevel hatarozzuk meg ami a parameterul adott sztring hosszat adja meg. A sztring az egy parancssori argumentum. Jelen esetben a meghatarozando sztring az arg[1] lesz ami a megadott kulcs. Az strncpy(x,y,z) fuggveny az y altal mutatott parancssori argumentumot atmasolja x-be  maximum n bajtot. Mukodesukhoz szukseges a string.h header file amit include-olnunk kell. A while ciklus addig fut amig a feltetel hamis, amig van olvashato bajt. A read fuggveny elso parametere az hogy honan olvas, jelenes esetben 0 tehat a szabvanyos bemenetrol olvas. A masodik parameter hogy hol tarolja a beolvasott bajtokat, jelen estben a buffer vektorba amit void*-al tipuskenyszeritettunk. A harmadik parameter pedig az hogy hany bajtot olvasson be. A visszateresi erteke a beolvasott bajtok szama, 0 ha nincs beolvasando bajt. A program addig fut amig a while ciklus fut, az pedig amig tud beolvasni legalabb 1 bajtot a read. Mivel a while felteteleben duplan van zarojelezve a tartalom igy nem logikai vizsgalatot vegez a feltelben, hanem az olvasott_bajtok valtzo erteket modistja a read. A while ciklus addig fut vegtelen cikluskent amig 0-nal nagyobb egeszeket kap vissza, de minden ciklus utan a read olvas igy valtozik a feltelel erteke, majd 0-t eleri ha nincs ugye olvasando bajt, a while(0) pedig kilep a ciklusbol. Mivel 1 bajt 1 karakter mert 8 biten tarunk egy karaktert ezen a rendszeren ezert 256 bajt olvasa 256 karaktert jelent. A char vektor pedig bajtonkent tarolja az adatokat, 1 bajt 1 elem a vektorban. A for ciklusban bajtonket olvassuk be sorba a buffer vektor tartalmat es egyenkent exorozzuk. Az exor muvelet jele ^ operator. Ami 0^0 es 1^1 eseten 0-t, 1^0 es 0^1 eseten 1-t ad eredmenyul. Igy ha mivel fix a kulcs igy ujbol exorozva visszakapjuk az eredeti eredmenyt, mert minden egyfelekeppen johet ki. Igy minden karaktert 8 biten exoroz egy 8 bites kulcscsal es 8 bites eredmenyt erdmeyul kapja az adott indexu buffer vektor. A % operator kiirja a maradekos osztas maradekat ami egesz szam, ha nincs meg benne akkor az eredeti szamot, ha pont annyiszor van meg akkor 0-t. Ugye szukseges ezzel a modszerrel kinullazni a kulcs_index-et mivel a kulcs_meret altalban kisebb lesz mint az olvasott_bajtok merete. A write fuggveny parameterit ugyanugy kell megadni mint a read-t, itt 1-et adunk meg az elso paramternek igy a szabvanyos kimenetre ir. A read hasznalatahoz szukseges az unistd.h header es az stdio.h header pedig mivel a bemeneten es kimeneten dolgozunk. A read fuggveny masodik paramtere void tipusu pointer kell legyen igy a buffert void*-al tipuskenyszeritjuk. A buffer a buffer[] sor 0. elemenek pointere, tehat a memoriacimet tarolja. A sor elelemei sorba vannak gy a read ir sorba elemenkent egybajtot mert a sor char tipusu. Az olvasott_bajtok valtozot nemszukseges inicializalni, mert a read-nek mindnig van visszateresi erteke es nem asznaljuk a whhile cikluson kivul. A while ciklus azert szukseges hogy tudjuk hany bajtot olvastunk be ami az exor muvelet elvegzesehez szukseges, ezt meglehetne hatarozni a sor meretebol ,de nagyobb szovegeknel lasabb es nembiztos eleg a memoria. Viszont nem tudjuk mennyi bajtot olvasunk be es mivel a sor elemeit tul lepve errort kapunk ezert  ciklust kell hasznalnunk kiveve ha nagy meretu sort hasznalunk de ugy nem biztos mukodesu.
	</para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
<programlisting language="java">
                <![CDATA[
public class ExorTitkosító {
    
    public ExorTitkosító(String kulcsSzöveg,
            java.io.InputStream bejövőCsatorna,
            java.io.OutputStream kimenőCsatorna)
            throws java.io.IOException {
        
        byte [] kulcs = kulcsSzöveg.getBytes();
        byte [] buffer = new byte[256];
        int kulcsIndex = 0;
        int olvasottBájtok = 0;

        while((olvasottBájtok =
                bejövőCsatorna.read(buffer)) != -1) {
            
            for(int i=0; i<olvasottBájtok; ++i) {
                
                buffer[i] = (byte)(buffer[i] ^ kulcs[kulcsIndex]);
                kulcsIndex = (kulcsIndex+1) % kulcs.length;
                
            }
            
            kimenőCsatorna.write(buffer, 0, olvasottBájtok);
            
        }
        
    }
    
    public static void main(String[] args) {
        
        try {
            
            new ExorTitkosító(args[0], System.in, System.out);
            
        } catch(java.io.IOException e) {
            
            e.printStackTrace();
            
        }
        
    }
    
}
]]>
</programlisting>
	<para>
	Java program minden sora egy osztalyban van es tartalmazni kell a programnak a main fuggvenyt. Az osztalynevek nagykezdobetuvel kezdodnek es a fajl neve az osztaly neve, fajlkiterjesztese .java. Javac paranccsal general egy .class kitejesztesu fajlt amit a nevvel futtathatunk a java parancs segitsegevel ekkor nem kell a nev utan a kiterjesztest irni. A main fuggveny pontosabban a public static void main(String[] args) kod. A hibakezelesre hasznaljuk az try es catch szavakat mivel hiba eseten kilep a program. A try-ba megadott reszek tesztelodnek a program futasa kozben es hiba eseten a catch-be megadott kod lefut. Jelen esetben a try tartalma az ExorTitkosito nevu konstruktor ami szinte maga a program es a catch a  bemeneti-kimeneti hibakat kezeli. A throws kifejezessel jelezzuk hogy milyen tipusu hibat dob a konstruktor tipusu fuggveny ezt a fuggveny parameterei es utasitasai koze kell dekralalni. A konstruktor nevenek meg kell egyeznie az osztaly nevevel es a main fuggvenybe valo hivasa a new kifejezessel tortenik. Hivaskor elso parameternek egy sztringnek kell lenni mivel ugy dekralartuk ez jelen esetben a parancssorba irt elso sztring a java ExorTitkosito utan amit az args[0] parancs erteke. A masodik paramter az hogy honnan olvassuk az adatokat a System.in a szabvanyos bemenet. A harmadik paramter a System.out ami a szabvanyos kimenet ahova ir a fuggveny. A read fuggvenyt a java.io.InputStream elotaggal objektummal hasznaljuk a write fuggvenyt a java.io.OutputStream-mel amit atneveztunk bejovoCsatorna-ra es kimenoCsatorna-ra az ExorTitkosito fuggveny dekralaciojanal. Dekralaljuk a kulcs nevu sort byte tipussal azaz minden eleme 1 bajt lesz erteke a parancssorba megadott kulcs lesz amit a getBytes fuggveny segitsegevel mentunk a kulcs sorba. A getBytes fuggveny a sztringet kodolja egy bajtsorozatba majd visszaad egy bajtsort, a sztringet az elotte levo resz hatarozza meg. A buffer nevu sort letrehozzuk byte tipussal es ertekul adunk egy uj byte nevu sort 256 elemmel tehat 256 bajtnyi lesz a sor es a buffer sor mutatojat ra fog mutatni. A kulcsIndex es az olvasottBajtok valtozokat deklaraljuk egeszekenk es inicializaljuk 0 ertekekkel. A while ciklus fut vegtelen cikluskent amig van beolvasando bajt mivel a read fuggveny visszateresi erteke a beolvasott bajtok szama majd -1 ha mar nincs tobb beolvasando bajt. Tehat a beolvasas batjtonkent megy no az olvasottBajtok valtozo erteke amit felhassznalunk az exor muvelet elvegzesehez es a kiiratashoz. Beolvas egy bajtot exorozza a kulcs megfelelo bajtjaval majd kiirja a szabvanyos kimenetre majd addig fut ujbol mig van bemenet. A write fuggveny elso parameter hogy hova irjon a masodik parameter hogy mennyi a kezdeti eltolas merteke a harmadik paramter az hogy hany bajtot irjon ki. 
	</para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
<programlisting language="c">
                <![CDATA[
#define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 8
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>

double
atlagos_szohossz (const char *titkos, int titkos_meret)
{
  int sz = 0;
  for (int i = 0; i < titkos_meret; ++i)
    if (titkos[i] == ' ')
      ++sz;

  return (double) titkos_meret / sz;
}

int
tiszta_lehet (const char *titkos, int titkos_meret)
{

  double szohossz = atlagos_szohossz (titkos, titkos_meret);

  return szohossz > 6.0 && szohossz < 9.0
    && strcasestr (titkos, "hogy") && strcasestr (titkos, "nem")
    && strcasestr (titkos, "az") && strcasestr (titkos, "ha");

}

void
exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret)
{

  int kulcs_index = 0;

  for (int i = 0; i < titkos_meret; ++i)
    {

      titkos[i] = titkos[i] ^ kulcs[kulcs_index];
      kulcs_index = (kulcs_index + 1) % kulcs_meret;

    }

}

int
exor_tores (const char kulcs[], int kulcs_meret, char titkos[],
	    int titkos_meret)
{

  exor (kulcs, kulcs_meret, titkos, titkos_meret);

  return tiszta_lehet (titkos, titkos_meret);

}

int
main (void)
{
  char kulcs[KULCS_MERET];
  char titkos[MAX_TITKOS];
  char *p = titkos;
  int olvasott_bajtok;

  while ((olvasott_bajtok =
	  read (0, (void *) p,
		(p - titkos + OLVASAS_BUFFER <
		 MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
    p += olvasott_bajtok;
 
  for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
    titkos[p - titkos + i] = '\0';

  for (int ii = '0'; ii <= '9'; ++ii)
    for (int ji = '0'; ji <= '9'; ++ji)
      for (int ki = '0'; ki <= '9'; ++ki)
	for (int li = '0'; li <= '9'; ++li)
	  for (int mi = '0'; mi <= '9'; ++mi)
	    for (int ni = '0'; ni <= '9'; ++ni)
	      for (int oi = '0'; oi <= '9'; ++oi)
		for (int pi = '0'; pi <= '9'; ++pi)
		  {
		    kulcs[0] = ii;
		    kulcs[1] = ji;
		    kulcs[2] = ki;
		    kulcs[3] = li;
		    kulcs[4] = mi;
		    kulcs[5] = ni;
		    kulcs[6] = oi;
		    kulcs[7] = pi;

		    if (exor_tores (kulcs, KULCS_MERET, titkos, p - titkos))
		      printf
			("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
			 ii, ji, ki, li, mi, ni, oi, pi, titkos);

		    exor (kulcs, KULCS_MERET, titkos, p - titkos);
		  }

  return 0;
}
]]>
</programlisting>
	<para>
	Az int main fuggvenyt parameter nelkul deklaraltuk ugye void-al es definialtunk konstansokat. Deklaraltuk a kulcs es titkos vektorokat 4096 es 8 meretunek karakter tipussal igy anni bajtosak is. A p valtozot deklaraljuk pointerkent ami a memoriaba egy char tipusra mutat es inicializaljuk titkos sornev ertekevel  ami a sor 0. elemenek memoriacimet tarolja. Majd dekralaljuk az olvasott_bajtok valtozot. A while ciklust {} nelkul hasznalhatjuk ha csak a feltel utan levo egy allitast tartalmazza a ciklus ugye jelen esetben ; vagy {}-el jelolve. Ez ervenyes a for, if eseten is. Ugye a read fuggveny a szabvanyos bemenetrol olvas bajtonkent es menti void tipusu pointer cimere, jelen esetben a p valtozo cimere amit void*-al tipuskenyszeritettunk. Mivel char tipusu sorba menti az adatokat igy egy bit egy elem. A while ciklus addig fut vegtelen cikluskent amig van beolvasando bajt bagy elnem erjuk a 4096 bajtot, a felett mivel nincs tobb hely a titkos sorba igy kilep error-ral a program. Az olvasott_batjtok szamaval noveljuk a p pointer tipusu valtozoba mentett memoriacim meretet minden ciklus vegrehajtasakor. Pontosan annyival noveli ahany az olvasott_bajtok aktualis erteke. A read harmadik parametere ahova a beolvasando bajtokszamat kell megadni tartalmaz egy feltelteles kifejezest jeloles feltetel ? x : y. Ha a teljesul a feltetel akkor a kifejezes erteke x azaz a : elotti resz, ha nem teljesul akkor a kifejezes erteke y azaz a : utani resz. Igy jelen esetben a read harmadik parametere vagy OLVAS_BUFFER erteke amit definialtunk 256-nak vagy titkos ami a titkos sor elso vektoranak memoriacime hozzaadva MAX_TITKOS erteket amit definialtunk 4096-nak kivonva a p aktualis erteket. A p memoriacim kezdoerteke megegyezik a titkos memoriacimvel hisz mindketten a titkos sor 0. elemere mutatnak. A feltetel ellenorzi kisebb e beolvasott bajtok szama azaz beirt vektor elemeinek a szama amit a p - titkos hataroz meg es hozzadva az OLVASAS_BUFFER erteket kissebb e a MAX_TITKOS ertekenel mivel annyi eleme a sornak amibe ir a read fuggveny. Ugye 4096 az 16*256 igy ha 4096 a beolvasando szoveg akkor a ? x : y felteteles kifejezes x erteke 15-szor majd az y ertke 1-szer fut le. Ha pedig kevesebb lesz mint 256 valahanyszorosa ami kisebb mint 16 akkor beolvassa amennyi van visszadja ertekeul az olvasott_bajtok-nak es noveli a p-t majd probal +256 bajtot olvasni de 0 bajtot olvas igy 0 eredmenyt ad vissza es kilep a while ciklus. A for ciklus ha tele van a titkos sor akkor hamis feltellel kilep egyebkent a sor ures elemeit toltjuk fel \0 ertekekkel. Eredetileg a titkos sor azon elemei ahova nem olvastunk be adatot random szamokat tartalmaznak szinte minden hivatkozaskor kulonbozot. Az egymasba agyazott for ciklusok megadnak minden kombinaciot 8 szamjegyu titkositasi kulcs megfejtesere ugy ezzel volt exorozva az kodolatlan szoveg. Eloszor 00000000 kulcs lesz majd 0000001 majd 1-9 kozt aztan egyel elotte levo szamjeggyel. 0-9-ig egyenkent az utolso 0-9ig elotte levok 0-k es igy tovabb. Addig generalja a kulcsokat amig az if feltetel igaz nem lesz es kiirja a kulcsot a szabvanyos kimenetre. Az if felteletel tartalmazza az exor_tores fuggvenyt ami egesz szamot ad vissza ha 1-et akkor teljesul az if feltetel ha 0-t akkor az if utasitas resze nem fu le. Ezt a tiszta_lehet fuggveny hatarozza meg az atlagos_szohossz fuggveny segitsegevel. Az atlagos_szohossz fuggvennyel megszamoljuk hany szokoz van a beolvasott szovegben es leosztjuk az osszes karakterek szamaval, mivel ez nem biztos egesz szam igy double visszateresu erteku a fuggveny es kiszamitaskor a muveletet tipuskenyszeritjuk double-re. Ez az ertek lesz a szohossz valtozo erteke a tiszta_lehet fuggvenyben aminek a visszateresi erteket egy osszetett logikai feltetel hatarozza meg. A logikai feltetel logikai es operator ami akkor igaz ha minden komponense nem 0, egyebkent 0. A feltetelben ellenorizzuk a szohossz 6.0-nal nagyobb es 9.0-nal kiseebb es tartalmazza e a gyakori magyar szavakat a "hogy" "nem" "az" "ha" szavak resszokent szerepelnek a beolvasott szovegben. Ha megtalalja a keresett szot akkor visszaadja annak elso betujenek elso elofordulasi helyenek pointeret, ha pedig nincs a szovegben akkor 0-t ad vissza. Az exor fuggveny amit az exor_tores fuggveny hiv meg a titkos sort bajtonkent exorozza a kulcs sor bajtjaival sorba 0-tol 7-ig majd ismetelve ameddig a titkos sor tart. A const szoval konstans valtozokat hoztunk letre aminek ha valtoztatnank az erteket hibauzenetet kapnank. A strcasestr fuggveny hasznalatahoz szukseges a string.h header file es a _GNU_SOURCE-t definialni. Definilani az include-olas elott kell. A program minden kulcsot legeneral de csak a feltelnek megfeleloeket irja ki a printf fuggveny segitsegevel, minden lepesben 2-szer exorozunk igy a titkos sor ertekei a beolvasott marad. 
	</para>        
	<para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
<programlisting language="R">
                <![CDATA[
library(neuralnet)

a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)

or.data <- data.frame(a1, a2, OR)

nn.or <- neuralnet(OR~a1+a2, or.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.or)

compute(nn.or, or.data[,1:2])


a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)
AND   <- c(0,0,0,1)

orand.data <- data.frame(a1, a2, OR, AND)

nn.orand <- neuralnet(OR+AND~a1+a2, orand.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.orand)

compute(nn.orand, orand.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])


a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)


exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=c(6, 4, 6), linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])
]]>
</programlisting>
        <para>
            R
        </para>
	<para>
	A neuralis halokat nem programozzuk hanem tanitjuk. Az elso sorba belepunk a neuralnet konyvtarba. Majd letrehozzuk a c vektorokat es elnevezzuk a1, a2, OR-nak hogy tudjunk rajuk hivakozni. Ezzel deklaraltuk az a1, a2, OR valtozokat a megfelolo ertekekkel. 0 es 1 az igaz hamis OR, AND,EXOR pedig a logikai muveletek amelyeket beakarunk tanitani. Ugye az OR azaz a megengedo vagy csak hamis hamis ertekeknel ad vissza hamisat egyebkent igazat. Az And azaz az es csak igaz es igaz ertekeknel ad vissza igaz erteket egyebkent hamis. Az EXOR azaz a kizaro vagy pedig hamis es hamis erteknel hamis, igaz es igaz ertekeknel hamis, igaz hamis es hamis igaz ertekeknel pedig igaz. Az or.data nevvel letrehozunk egy matrixot az adott a1, a2, OR vektorokbol. Majd nn.or neven letrehozzuk a bepitett neuralnet fuggvenyt amely a megfeleloen megadott parameterekkel kiszamolja a szukseges sulyokat egy aktivacios fuggveny segitsegevel es a hibarol is kapunk informaciot. A sulyok mellett van egy eltolassuly is aminek ugye akkor van jelentosege ha a bemeneti neuronok ertekei 0-k, mert akkor az eltolosuly ertekeben lesz majdnem 0 a fuggveny. Ezzel az eltolassullyal nemcsak 0 koruli zerushelyu fuggvenyeket hasznalhatunk. Az aktivacios fuggveny a sulyozott osszegekkel szamol es visszaad egy erteket 0 es 1 kozt. Jelen esetben az aktivacios fuggveny 1/(1+exp(-x) de mas fuggvenyt is hasznalhatunk peldaul a hiperbolikus tangens. A vesztesegfuggvney kiszamolja a hibat az eredeti kimenet es a vart kimenet ismerteben. Jelen esetben az 1/2*(y-x)^2 ami az atlagos negyzetes eltereskent szamolja ki a hibat. A neuralnet elso paramtereben megadunk egy formulat aminek R-ben az elemeit a ~ operatorral valasztjuk el, bal oldalra kell az eredmenyt irni, jobbra amikbol kijon majd. Az egyes oldalakon a valtozoneveket + operatorral kapcsoljuk ossze ahogy az OR+AND~a1+a2. A ~ operator baloldalan a bemeno neuronok vannak, a jobb oldalan a kimenok. A masodik paramterkent az adatot amivel dolgozik a fuggveny, ami jelen eseben egy matrix. A hidden ertekekent megadhatjuk hany rejtett neuron legyen, alaperteke 1. Az EXOR-nal tobbretegu neuronokkal kell szamolni, mert rejtett neuronok nelkul nagy hibaval szamol. A hidden erteket megadhatjuk vektorral is ekkor ahany elemu annyi sor es az ertekei az oszlopok szama soronkent igy kisebb hibat kaphatunk ahogy a c(6,4,6) vektorral is kaptunk. A logical.output-nak logikai erteket kell adni TRUE vagy FALSE-t. TRUE az alapertelmezett ertek ekkor az aktivacios fuggvenyt nem alkalmazza a kimeno neuronokra. A stepmax-ba megadhatjuk hany lepest vegezhet el maximum a neurlais halozat kepzesekor. Ennek alaperteke 1e+05 azaz 100000. A threshold erteke meghatarozza a reszleges hiba kuszoberteket, amit ha atlep megall a szamitas. A plot fuggvennyel kirajzoltatjuk az nn.exor-t. A compute elso paramtere a fuggveny neve amelyikkel szamoltuk a neuralis halot. A masodik paramtere tartalmazza azt a matrixot amelybol szamoltuk a neuralis halot. Csak data.frame-ba tudunk letrehozni matrixot vektor nevekbol, a tobbi altalunk adott nev tetszoleges. Ezzel ellenorizhetjuk a kapott sulyok es az eredeti ertekekkel szamovla mennyi jon ki EXOR, AND,OR helyett, ez a ne.result matrixba van.
	</para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
<programlisting language="C++">
                <![CDATA[
#ifndef QL_HPP
#define QL_HPP

#include <iostream>
#include <cstdarg>
#include <map>
#include <iterator>
#include <cmath>
#include <random>
#include <limits>
#include <fstream>

class Perceptron
{
public:

  Perceptron ( int nof, ... )
  {
    n_layers = nof;

    units = new double*[n_layers];
    n_units = new int[n_layers];

    va_list vap;

    va_start ( vap, nof );

    for ( int i {0}; i < n_layers; ++i )
      {
        n_units[i] = va_arg ( vap, int );

        if ( i )
          units[i] = new double [n_units[i]];
      }

    va_end ( vap );

    weights = new double**[n_layers-1];

#ifndef RND_DEBUG
    std::random_device init;
    std::default_random_engine gen {init() };
#else
    std::default_random_engine gen;
#endif

    std::uniform_real_distribution<double> dist ( -1.0, 1.0 );

    for ( int i {1}; i < n_layers; ++i )
      {
        weights[i-1] = new double *[n_units[i]];

        for ( int j {0}; j < n_units[i]; ++j )
          {
            weights[i-1][j] = new double [n_units[i-1]];

            for ( int k {0}; k < n_units[i-1]; ++k )
              {
                weights[i-1][j][k] = dist ( gen );
              }
          }
      }
  }

  Perceptron ( std::fstream & file )
  {
    file >> n_layers;

    units = new double*[n_layers];
    n_units = new int[n_layers];

    for ( int i {0}; i < n_layers; ++i )
      {
        file >> n_units[i];

        if ( i )
          units[i] = new double [n_units[i]];
      }

    weights = new double**[n_layers-1];

    for ( int i {1}; i < n_layers; ++i )
      {
        weights[i-1] = new double *[n_units[i]];

        for ( int j {0}; j < n_units[i]; ++j )
          {
            weights[i-1][j] = new double [n_units[i-1]];

            for ( int k {0}; k < n_units[i-1]; ++k )
              {
                file >> weights[i-1][j][k];
              }
          }
      }
  }


  double sigmoid ( double x )
  {
    return 1.0/ ( 1.0 + exp ( -x ) );
  }


  double operator() ( double image [] )
  {

    units[0] = image;

    for ( int i {1}; i < n_layers; ++i )
      {

#ifdef CUDA_PRCPS

        cuda_layer ( i, n_units, units, weights );

#else

        #pragma omp parallel for
        for ( int j = 0; j < n_units[i]; ++j )
          {
            units[i][j] = 0.0;

            for ( int k = 0; k < n_units[i-1]; ++k )
              {
                units[i][j] += weights[i-1][j][k] * units[i-1][k];
              }

            units[i][j] = sigmoid ( units[i][j] );

          }

#endif

      }

    return sigmoid ( units[n_layers - 1][0] );

  }

  void learning ( double image [], double q, double prev_q )
  {
    double y[1] {q};

    learning ( image, y );
  }

  void learning ( double image [], double y[] )
  {
    //( *this ) ( image );

    units[0] = image;

    double ** backs = new double*[n_layers-1];

    for ( int i {0}; i < n_layers-1; ++i )
      {
        backs[i] = new double [n_units[i+1]];
      }

    int i {n_layers-1};

    for ( int j {0}; j < n_units[i]; ++j )
      {
        backs[i-1][j] = sigmoid ( units[i][j] ) * ( 1.0-sigmoid ( units[i][j] ) ) * ( y[j] - units[i][j] );

        for ( int k {0}; k < n_units[i-1]; ++k )
          {
            weights[i-1][j][k] += ( 0.2* backs[i-1][j] *units[i-1][k] );
          }

      }

    for ( int i {n_layers-2}; i >0 ; --i )
      {

        #pragma omp parallel for
        for ( int j =0; j < n_units[i]; ++j )
          {

            double sum = 0.0;

            for ( int l = 0; l < n_units[i+1]; ++l )
              {
                sum += 0.19*weights[i][l][j]*backs[i][l];
              }

            backs[i-1][j] = sigmoid ( units[i][j] ) * ( 1.0-sigmoid ( units[i][j] ) ) * sum;

            for ( int k = 0; k < n_units[i-1]; ++k )
              {
                weights[i-1][j][k] += ( 0.19* backs[i-1][j] *units[i-1][k] );
              }
          }
      }

    for ( int i {0}; i < n_layers-1; ++i )
      {
        delete [] backs[i];
      }

    delete [] backs;

  }

  ~Perceptron()
  {
    for ( int i {1}; i < n_layers; ++i )
      {
        for ( int j {0}; j < n_units[i]; ++j )
          {
            delete [] weights[i-1][j];
          }

        delete [] weights[i-1];
      }

    delete [] weights;

    for ( int i {0}; i < n_layers; ++i )
      {
        if ( i )
          delete [] units[i];
      }

    delete [] units;
    delete [] n_units;

  }

  void save ( std::fstream & out )
  {
    out << " "
        << n_layers;

    for ( int i {0}; i < n_layers; ++i )
      out << " " << n_units[i];

    for ( int i {1}; i < n_layers; ++i )
      {
        for ( int j {0}; j < n_units[i]; ++j )
          {
            for ( int k {0}; k < n_units[i-1]; ++k )
              {
                out << " "
                    << weights[i-1][j][k];

              }
          }
      }

  }

private:
  Perceptron ( const Perceptron & );
  Perceptron & operator= ( const Perceptron & );

  int n_layers;
  int* n_units;
  double **units;
  double ***weights;

};
#endif
]]>
</programlisting>
        <para>
            A program nem tartalmaz main fuggvenyt igy hasznalatahoz masik fajlban irt main fuggveny es megfeleloen megadott adatok fuggveny parameterek szuksegesek. A program tartalma a Perceptron osztaly amiben definialunk fuggvenyeket  es valtozokat. Egy objektumnak van private es public resze is. Eloszor a private resz fut le, ehhez nincs kulso hozzaferes. A private reszben letrehozunk egy masolo konstruktort es egy seged konstruktort majd deklaraltunk egy valtozot es 3 pointert. Az egy *-os pointert 1 dimenzios tombokhoz azaz sorokhoz hasznaljuk, a **-os pointert 2 dimenzios tombokhoz azaz matrixokhoz, a ***-os pointert 3 dimenzios tombokhoz hasznaljuk. Ezek a szamitasokhoz szuksegesek. A masolo konstruktorral a masolt objektumnak es maganak kulon memoriat foglal, a seged konstruktor ugyanazt hasznalja, jelen esetben a masolo konstruktoret. Mivel private reszben definialtak igy nem hasznalhatjuk oket mas programba amivel hasznaljuk ezt a kodot. A folosleges ujradefinialas elkerulese erdekeben ami ugye novelne a futasi idot definialtuk a QL_HPP-t, ami ujradefinialas eseten #endif-re lep es az #ifndef-nel ellenorzi volt e mar definialva. A Preceptron szerepel parametizalt osztalykent melynek ertekeit objektum letrehozasakor adjuk meg, parameterei eltero mennyisegu egesz tipsu valtozok lehetnek attol fuggoen hany rejtett neuoront hasznalunk. Mivel hiba-visszaterjeszteses preceptronkent hasznaljuk igy minimum 4 paramtert kell megadnunk. Az elso paramter a retgek szama, a masodik a bemeneti neuronok szama azaz adatok szama, a harmadik paramter a rejtett neuronok szama, az utolso paramter a kimeneti neuronok szamat adja meg. A variadic fuggveny teszi lehetove hogy eltero paramteru legyen a konstruktor. Hasznalatahoz includolni kell a cstdarg.h header filet. A va_list iformaciot tarol a lista aktualis allasarol, nevet kell neki adni amit az va_start, va_arg es va_end hasznal. A va_start inicializalja a variable argument listat a legutolso megadott kontruktor valtozoval, a konstruktor dekralarasnal legalabb egy valtozot inicializalni kell es utanna ... szukseges e fuggveny hasznalatahoz. A va_arg parametereben megadjuk milyen tipusokat inicializalodjanak. A va_end a veget jelzi a variable arguments listanak. Az n_units sor erekei a va_arg altal visszadaott ertekek, azaz majd egy kulso objektum bizonyos paramterei lesznek, merte megeyezik a konstruktor elso paramterevel. Az units matrix 1.-tol a konstruktor elso parametere-1-ig indexu sorainak az oszlopainak double mennyisegeit, helyet foglalunk. A #ifndef neve mar volt definialva, akkor az #else utani resz fut az #endif-ig. Ha pedig meg nem volt definialva akkor az #else-ig lefut, az #else nem. A tartalma az hogy  az  std::uniform_real_distribution kisebbkacsacsor double nagyobbkacsacsor dist ( -1.0, 1.0 ); sor segitsegevel -1.0 es 1.0 kozti szamokat random general double tipsban. Ennek segitsegevel adjuk meg a sulyok kezdoertekeit. A sulyokat es a retegek szamat es az egyes retegek neuronjainak szamat kulso fajlbol is beolvashatjuk. A sigmoid fuggveny az aktivacios fuggveny double ertekekkel szamol, ez a sulyozott ertekek osszegeibol kiszamol egy 0 es 1 koze eso szamot. A () operator tulterhelesevel funktort hozunk letre igy egy Perceptron objektumot tipuskent megadva szamolhatunk az objektum es a funktor paramterenek ertekeivel es a szamolt ertek valtozasok mentodnek es adhatunk visszateresi erteket is. A funtkor paramtere egy 2 dimenzios tomb ami a tomoritendo kep pixel adatait varja parameterul. A pixel adatokat 3d tombkent olvasva irjuk 2 dimenzios tombbe sor vagy oszlopfolytonosan for ciklusok segitsegevel. A pixeladatokat az image 2 dimenzios tomb tartalmazza melynek a mutatoja az image es ezt ertekul adjuk az units[0] 2 dimnzios tomb 0. soranak mutatojanak igy az units[0] az image ertekeit hasznalja szamitaskor. A  #pragma omp parallel for parancsot arra hasznaljuk hogy tobb szalon szamoljon a processzor. Az units 2 dimenzios tomb 1. soratol a layers-1. soraig szamoljuk ki a sulyozott osszegek aktivacios fuggveny ertekeit. A funktor visszateresi erteke a tanitashoz szukseges, ez lesz a tenyleges ertek. A vart erteket a leraning fuggveny masodik paramterenek adjuk meg, amit a y valtozoba ment. A learningbe van agyazva megegy leraning fuggveny amivel meghatarozzuk a megfelelo sulyokat hogy a vart erteket kapjuk. Ehhez hibakkal szamolunk es bovitjuk a tenyleges sulyokat. A hibat a backs 2 dimenzios tomb segitsegevel szamoljuk ki ebbe szamolunk az utanna levo units ertek segitsegevel. Majd a sulyhoz hozzadjuk  a hozzatartozo backs*konstans ertek*kovetkezo units erteket es igy megkapjuk a megfelelo sulyt. Az 1-sigmoid(units)-nal a simoid nelkul 1 lehetne igy kinullaznank a sulyokat, de ujra sigmoid-olva tart az ertek csokken folyamatosan. Negativ ertek eseten a masodik sigmoid az 0.5 lesz utanna egyenletesen no ez az ertek. A neuron hibajat a 2 felekeppen szamoljuk ki, ha kimeneti neuron akkor a vart-tenyleges hibaval szamolnu, egyebkent a megfelelo kiszamolt suly es az units es konstans szoraztot osszeadva. A fuggveny vegen toroljuk a backs tombnek foglalt helyeket a delete fuggveny segitsegevel, amit a new-val foglaltunk. A destruktor jele ~ es neve az osztaly neve torli az objektumot es jelen esetben a foglalt memoriacimeket is, ez a program vegen fut le. A save fuggvennyel kimentethjuk a retegek szamat, az egyes retegek neuronjainak a szamat es a sulyokat.
	</para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>
</chapter>                        

        </para>            
    </section>        
    <section>
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
        

</chapter>                
